{
  "hash": "ddceb9d9f5b120f390b29db4a7f1f587",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"12 - Resumir datos\"\noutput: html_document\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n# Introducción\n\nHasta ahora hemos usado funciones para filtrar, reordenar y agregar columnas a una tabla de datos. Otra cosa que es muy útil es crear nuestras propias tablas de datos para a partir los datos de otra tabla. En este notebook exploramos cómo crear tablas que resuman la información de otras tablas.\n\n**Objetivos**\n\n-   Usar la función `summarise` para crear tablas de resumen de datos\n-   Usar la función `group_by` para realizar operaciones con datos agrupados por campos\n\n# Importar y preparar los datos\n\nEn este notebook continuamos trabajando con los datos de pobreza de CONEVAL que usamos en el notebook anterior. Nos quedamos solo con los datos de 2020 y les agregamos la columna de porcentaje de pobreza:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\npobreza <- read_csv(\n  './data/pobreza_municipal.csv', \n  col_select = c(\n    'entidad_federativa', \n    'municipio', \n    'poblacion', \n    'pobreza_poblacion',\n    'pobreza_extrema_poblacion',\n    'periodo'\n    )\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat <- vroom(...)\n  problems(dat)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 7382 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): entidad_federativa, municipio\ndbl  (3): poblacion, pobreza_poblacion, pobreza_extrema_poblacion\ndate (1): periodo\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\npobreza_2020 <- filter(pobreza, periodo == '2020-01-01')\n\npobreza_2020 <- mutate(\n  pobreza_2020, \n  pobreza_porcentaje = pobreza_poblacion / poblacion * 100, \n  .after = pobreza_poblacion\n  )\n\npobreza_2020\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2,469 × 7\n   entidad_federativa municipio   poblacion pobreza_poblacion pobreza_porcentaje\n   <chr>              <chr>           <dbl>             <dbl>              <dbl>\n 1 Aguascalientes     Aguascalie…    922268            218414               23.7\n 2 Aguascalientes     Asientos        48635             19518               40.1\n 3 Aguascalientes     Calvillo        52377             23966               45.8\n 4 Aguascalientes     Cosío           15942              5905               37.0\n 5 Aguascalientes     Jesús María    127962             33708               26.3\n 6 Aguascalientes     Pabellón d…     45100             13042               28.9\n 7 Aguascalientes     Rincón de …     53844             21813               40.5\n 8 Aguascalientes     San José d…      9201              4211               45.8\n 9 Aguascalientes     Tepezalá        20898              7868               37.6\n10 Aguascalientes     El Llano        20182              8196               40.6\n# ℹ 2,459 more rows\n# ℹ 2 more variables: pobreza_extrema_poblacion <dbl>, periodo <date>\n```\n\n\n:::\n:::\n\n\n\n\n# Resumir datos individualmente\n\nUsando las funciones `sum`, `mean`, `min` y `max` y la función `pull` o `select` podemos resumir los valores columas que queramos. Por ejemplo, para conocer la población total en México podemos sumar la columna `poblacion`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(pull(pobreza_2020, poblacion), na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 127409241\n```\n\n\n:::\n:::\n\n\n\n\nTambién podríamos calcular la población total en condición de pobreza en México sumando la columna `pobreza_poblacion`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(pull(pobreza_2020, pobreza_poblacion), na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 56647995\n```\n\n\n:::\n:::\n\n\n\n\nTambién nos podrían interesar la media, el máximo y mínimo de la columna `pobreza_porcentaje`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(pull(pobreza_2020, pobreza_porcentaje), na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 62.00236\n```\n\n\n:::\n\n```{.r .cell-code}\nmax(pull(pobreza_2020, pobreza_porcentaje), na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 99.65601\n```\n\n\n:::\n\n```{.r .cell-code}\nmin(pull(pobreza_2020, pobreza_porcentaje), na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5.450712\n```\n\n\n:::\n:::\n\n\n\n\nSin embargo, algo que sería más cómodo es tener una única tabla con todos estos valores de resumen. Para eso existe la función `summarise`.\n\n# Función `summarise`\n\nLa función `summarise` nos permite crear una sola tabla en la que pongamos los valores de resumen que nos interesan. Por ejemplo, podemos agregar columnas para todos los valores que obtuvimos en la sección anterior. Nota como aquí ya no necesitamos la función `pull`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummarise(\n  pobreza_2020,\n  pob_total = sum(poblacion, na.rm = TRUE),\n  pob_pobreza_total = sum(pobreza_poblacion, na.rm = TRUE),\n  media_porcentaje_pobreza = mean(pobreza_porcentaje, na.rm = TRUE),\n  max_porcentaje_pobreza = max(pobreza_porcentaje, na.rm = TRUE),\n  min_porcentaje_pobreza = min(pobreza_porcentaje, na.rm = TRUE)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 5\n  pob_total pob_pobreza_total media_porcentaje_pobreza max_porcentaje_pobreza\n      <dbl>             <dbl>                    <dbl>                  <dbl>\n1 127409241          56647995                     62.0                   99.7\n# ℹ 1 more variable: min_porcentaje_pobreza <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n# Resúmenes con datos agrupados\n\n`summarise` nos puede dar resúmenes muy útiles, sin embargo, algo más útil sería obtener resúmenes agrupando los datos. Por ejemplo, si quisiéramos saber cuál es el porcentaje de población en condición de pobreza en cada estado necesitamos la información de la población en pobreza total de un estado, y la población total del estado. Para sumar sólo la información de un estado podríamos usar la función `filter`, sin embargo como tenemos 32 estados tendríamos que aplicarla 32 veces... que flojera. Para eso es que tenemos la función `group_by`\n\nLa función `group_by` nos permite hacer operaciones agrupando los datos por un criterio. Por ejemplo, si queremos agrupar los datos por estado podemos hacer lo siguiente:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npobreza_2020_agrupado_por_entidad <- group_by(pobreza_2020, entidad_federativa)\npobreza_2020_agrupado_por_entidad\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2,469 × 7\n# Groups:   entidad_federativa [32]\n   entidad_federativa municipio   poblacion pobreza_poblacion pobreza_porcentaje\n   <chr>              <chr>           <dbl>             <dbl>              <dbl>\n 1 Aguascalientes     Aguascalie…    922268            218414               23.7\n 2 Aguascalientes     Asientos        48635             19518               40.1\n 3 Aguascalientes     Calvillo        52377             23966               45.8\n 4 Aguascalientes     Cosío           15942              5905               37.0\n 5 Aguascalientes     Jesús María    127962             33708               26.3\n 6 Aguascalientes     Pabellón d…     45100             13042               28.9\n 7 Aguascalientes     Rincón de …     53844             21813               40.5\n 8 Aguascalientes     San José d…      9201              4211               45.8\n 9 Aguascalientes     Tepezalá        20898              7868               37.6\n10 Aguascalientes     El Llano        20182              8196               40.6\n# ℹ 2,459 more rows\n# ℹ 2 more variables: pobreza_extrema_poblacion <dbl>, periodo <date>\n```\n\n\n:::\n:::\n\n\n\n\nNota como parece que no les pasó nada a los datos. La función `group_by` por si sola no afecta en nada a los datos, solamente le indica a las funciones que usemos posteriormente que deben realizar las operaciones agrupando a los datos por un criterio. Nota como hasta arriba de donde se imprime la tabla hay una leyenda que dice `Groups: entidad_federativa`.\n\nVeamos que pasa si ahora repetimos el mismo resumen de arriba pero con los datos agrupados:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummarise(\n  pobreza_2020_agrupado_por_entidad,\n  pob_total = sum(poblacion, na.rm = TRUE),\n  pob_pobreza_total = sum(pobreza_poblacion, na.rm = TRUE),\n  media_porcentaje_pobreza = mean(pobreza_porcentaje, na.rm = TRUE),\n  max_porcentaje_pobreza = max(pobreza_porcentaje, na.rm = TRUE),\n  min_porcentaje_pobreza = min(pobreza_porcentaje, na.rm = TRUE)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 32 × 6\n   entidad_federativa   pob_total pob_pobreza_total media_porcentaje_pobreza\n   <chr>                    <dbl>             <dbl>                    <dbl>\n 1 Aguascalientes         1373242            378118                     36.7\n 2 Baja California        3742465            865158                     25.6\n 3 Baja California Sur     885465            242190                     29.1\n 4 Campeche                978797            475080                     61.3\n 5 Chiapas                5586615           4158384                     80.5\n 6 Chihuahua              3892117            992479                     35.8\n 7 Ciudad de México       8721320           2981770                     32.8\n 8 Coahuila de Zaragoza   3139003            740180                     26.2\n 9 Colima                  786016            218604                     33.5\n10 Durango                1852264            696309                     50.7\n# ℹ 22 more rows\n# ℹ 2 more variables: max_porcentaje_pobreza <dbl>,\n#   min_porcentaje_pobreza <dbl>\n```\n\n\n:::\n:::\n\n\n\n\nNota cómo ahora en lugar de arrojarnos un solo valor que resume todos los datos de la columna nos arroja una tabla con 32 filas que corresponden a cada estado cada uno con sus propios valores.\n\nLos resultados que arroja la función `summarise` son una nueva tabla que podemos guardar en una variable:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npobreza_2020_entidades <- summarise(\n  pobreza_2020_agrupado_por_entidad,\n  pob_total = sum(poblacion, na.rm = TRUE),\n  pob_pobreza_total = sum(pobreza_poblacion, na.rm = TRUE),\n  media_porcentaje_pobreza = mean(pobreza_porcentaje, na.rm = TRUE),\n  max_porcentaje_pobreza = max(pobreza_porcentaje, na.rm = TRUE),\n  min_porcentaje_pobreza = min(pobreza_porcentaje, na.rm = TRUE)\n)\n\npobreza_2020_entidades\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 32 × 6\n   entidad_federativa   pob_total pob_pobreza_total media_porcentaje_pobreza\n   <chr>                    <dbl>             <dbl>                    <dbl>\n 1 Aguascalientes         1373242            378118                     36.7\n 2 Baja California        3742465            865158                     25.6\n 3 Baja California Sur     885465            242190                     29.1\n 4 Campeche                978797            475080                     61.3\n 5 Chiapas                5586615           4158384                     80.5\n 6 Chihuahua              3892117            992479                     35.8\n 7 Ciudad de México       8721320           2981770                     32.8\n 8 Coahuila de Zaragoza   3139003            740180                     26.2\n 9 Colima                  786016            218604                     33.5\n10 Durango                1852264            696309                     50.7\n# ℹ 22 more rows\n# ℹ 2 more variables: max_porcentaje_pobreza <dbl>,\n#   min_porcentaje_pobreza <dbl>\n```\n\n\n:::\n:::\n\n\n\n\nY esta tabla la podemos manipular como a cualquier tabla. Por ejemplo, podemos agregarle una columna con el porcentaje de población en pobreza en el estado:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npobreza_2020_entidades <- mutate(\n  pobreza_2020_entidades,\n  pob_pobreza_porcentaje = pob_pobreza_total / pob_total * 100,\n  .after = pob_pobreza_total\n)\n\npobreza_2020_entidades\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 32 × 7\n   entidad_federativa   pob_total pob_pobreza_total pob_pobreza_porcentaje\n   <chr>                    <dbl>             <dbl>                  <dbl>\n 1 Aguascalientes         1373242            378118                   27.5\n 2 Baja California        3742465            865158                   23.1\n 3 Baja California Sur     885465            242190                   27.4\n 4 Campeche                978797            475080                   48.5\n 5 Chiapas                5586615           4158384                   74.4\n 6 Chihuahua              3892117            992479                   25.5\n 7 Ciudad de México       8721320           2981770                   34.2\n 8 Coahuila de Zaragoza   3139003            740180                   23.6\n 9 Colima                  786016            218604                   27.8\n10 Durango                1852264            696309                   37.6\n# ℹ 22 more rows\n# ℹ 3 more variables: media_porcentaje_pobreza <dbl>,\n#   max_porcentaje_pobreza <dbl>, min_porcentaje_pobreza <dbl>\n```\n\n\n:::\n:::\n\n\n\n\nY podemos ordenarla de menor a mayor porcentaje de pobreza y usar `print` para ver la tabla completa:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(arrange(pobreza_2020_entidades, pob_pobreza_porcentaje), n = 32)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 32 × 7\n   entidad_federativa         pob_total pob_pobreza_total pob_pobreza_porcentaje\n   <chr>                          <dbl>             <dbl>                  <dbl>\n 1 Nuevo León                   5460396           1075563                   19.7\n 2 Baja California              3742465            865158                   23.1\n 3 Coahuila de Zaragoza         3139003            740180                   23.6\n 4 Chihuahua                    3892117            992479                   25.5\n 5 Baja California Sur           885465            242190                   27.4\n 6 Aguascalientes               1373242            378118                   27.5\n 7 Colima                        786016            218604                   27.8\n 8 Sinaloa                      3111958            879250                   28.3\n 9 Nayarit                      1340427            409311                   30.5\n10 Sonora                       3136574            978307                   31.2\n11 Jalisco                      8387145           2733157                   32.6\n12 Querétaro                    2155802            708271                   32.9\n13 Ciudad de México             8721320           2981770                   34.2\n14 Tamaulipas                   3746179           1339841                   35.8\n15 Durango                      1852264            696309                   37.6\n16 Zacatecas                    1636983            716296                   43.8\n17 Guanajuato                   6045151           2687205                   44.5\n18 San Luis Potosí              2874932           1283306                   44.6\n19 Quintana Roo                 1811370            812135                   44.8\n20 Michoacán de Ocampo          4748742           2163607                   45.6\n21 Hidalgo                      3054428           1394752                   45.7\n22 Yucatán                      2259381           1080973                   47.8\n23 Campeche                      978797            475080                   48.5\n24 México                      18136090           9206182                   50.8\n25 Morelos                      2036707           1071980                   52.6\n26 Tabasco                      2504927           1326733                   53.0\n27 Tlaxcala                     1367993            797310                   58.3\n28 Veracruz de Ignacio de la…   8343850           5076909                   60.8\n29 Puebla                       6497223           4117280                   63.4\n30 Oaxaca                       4134039           2638691                   63.8\n31 Guerrero                     3661640           2402664                   65.6\n32 Chiapas                      5586615           4158384                   74.4\n# ℹ 3 more variables: media_porcentaje_pobreza <dbl>,\n#   max_porcentaje_pobreza <dbl>, min_porcentaje_pobreza <dbl>\n```\n\n\n:::\n:::\n\n\n\n\nUna función muy útil para usar con datos agrupados es la función `n()`. Esta lo único que hace es contar el número de elementos de cada grupo. Por ejemplo para saber cuántos municipios hay en cada entidad podemos hacer lo siguiente:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npobreza_2020_agrupado_por_entidad <- group_by(pobreza_2020, entidad_federativa)\nsummarise(\n    pobreza_2020_agrupado_por_entidad, \n    num_municipios = n()\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 32 × 2\n   entidad_federativa   num_municipios\n   <chr>                         <int>\n 1 Aguascalientes                   11\n 2 Baja California                   6\n 3 Baja California Sur               5\n 4 Campeche                         12\n 5 Chiapas                         124\n 6 Chihuahua                        67\n 7 Ciudad de México                 16\n 8 Coahuila de Zaragoza             38\n 9 Colima                           10\n10 Durango                          39\n# ℹ 22 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n# Agrupar por varios valores\n\nLa función `group_by` nos permite agrupar por más de un solo valor. Por ejemplo, podemos hacer los mismos cálculos pero agrupando los valores de la tabla `pobreza` por entidad y periodo, para así tener los cálculos para cada entidad en diferentes años:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npobreza_agrupado_por_entidad_y_periodo <- group_by(pobreza, entidad_federativa, periodo)\n\nsummarise(\n  pobreza_agrupado_por_entidad_y_periodo,\n  pob_total = sum(poblacion, na.rm = TRUE),\n  pob_pobreza_total = sum(pobreza_poblacion, na.rm = TRUE)\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'entidad_federativa'. You can override\nusing the `.groups` argument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 96 × 4\n# Groups:   entidad_federativa [36]\n   entidad_federativa  periodo    pob_total pob_pobreza_total\n   <chr>               <date>         <dbl>             <dbl>\n 1 Aguascalientes      2010-01-01   1198083            456838\n 2 Aguascalientes      2015-01-01   1292901            400355\n 3 Aguascalientes      2020-01-01   1373242            378118\n 4 Baja California     2010-01-01   3235371           1019795\n 5 Baja California     2015-01-01   3499474           1021966\n 6 Baja California     2020-01-01   3742465            865158\n 7 Baja California Sur 2010-01-01    654837            202965\n 8 Baja California Sur 2015-01-01    770210            215109\n 9 Baja California Sur 2020-01-01    885465            242190\n10 Campeche            2010-01-01    842088            425296\n# ℹ 86 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n# Ejercicios\n\n## Ejercicio 1\n\n¿Ha disminuido o incrementado el porcentaje de población en condición en pobreza en México? Para contestar a la pregunta realiza los siguientes pasos:\n\n1.  Crea una variable `pobreza_agrupado_por_periodo` donde agrupes los datos de la tabla `pobreza` por periodo usando la función `group_by`\n2.  Crea una tabla de resumen con la función `summarise` que contenga la población total y población total en pobreza para cada periodo y guárdala en una variable que se llame `resumen_periodos`\n3.  Agrega una columna a la tabla `resumen_periodos` que tenga el porcentaje de población en pobreza usando la función `mutate`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Escribe aquí tu respuesta\n```\n:::\n\n\n\n\n## Ejercicio 2\n\n¿Cuáles son los municipios con mayor porcentaje de pobreza en la Ciudad de México? Para contestar a esta pregunta realiza los siguientes pasos:\n\n1.  Filtra los datos de la tabla `pobreza` usando la función `filter` para quedarte solo con los datos de la Ciudad de México y del periodo 2020, y guarda tus resultados en una variable que se llame `pobreza_cdmx_2020`\n2.  Agrega a tu tabla `pobreza_cdmx_2020` una columna donde calcules el porcentaje de pobreza de cada municipio. Recuerda sobrescribir tu variable para que los cambios queden guardados\n3.  Ordena tu tabla de mayor porcentaje de pobreza a menor porcentaje de pobreza.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Escribe aquí tu respuesta\n```\n:::\n\n\n\n\n## Ejercicio 3\n\n¿Cómo ha cambiado el porcentaje de población en condición de pobreza en el Estado de México a lo largo del tiempo? Para contestar a esta pregunta realiza los siguientes pasos:\n\n1.  Filtra los datos de la tabla `pobreza` usando la función `filter` para quedarte sólo con los datos del Estado de México, y guarda tus resultados en una variable que se llame `pobreza_edomex`.\n2.  Agrupa tus datos por periodo y guárdalos en una variable que se llame `pobreza_edomex_agrupado_por_periodo`\n3.  Crea una tabla `resumen_edomex_periodo` donde sumes la población total y población en pobreza para cada periodo.\n4.  Agrega a tu tabla`resumen_edomex_periodo` una columna con el porcentaje de población en condición de pobreza.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Escribe aquí tu respuesta\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}