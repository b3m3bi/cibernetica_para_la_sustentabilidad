{
  "hash": "c976c83c7761040cc985b9a52d46abac",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"13 - Escribir con pipes\"\noutput: html_document\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n\n# Introducción\n\nComo podrás haber notado conforme vamos haciendo códigos más largos tenemos que crear variables intermedias o sobreescribir variables que ya teníamos con nuevos valores. En este notebook introducimos los pipes los cuales son una forma de facilitar la escritura del código.\n\n**Objetivos**\n\n-   Utilizar los pipes para escribir el código de manera más concisa\n\n# Cargar los datos\n\nEn este notebook continuamos trabajando con los datos de pobreza de CONEVAL que usamos en los notebooks anteriores.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\npobreza <- read_csv(\n  './data/pobreza_municipal.csv', \n  col_select = c(\n    'entidad_federativa', \n    'municipio', \n    'poblacion', \n    'pobreza_poblacion',\n    'pobreza_extrema_poblacion',\n    'periodo'\n    )\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat <- vroom(...)\n  problems(dat)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 7382 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): entidad_federativa, municipio\ndbl  (3): poblacion, pobreza_poblacion, pobreza_extrema_poblacion\ndate (1): periodo\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n\n\n\n# El problema...\n\nCuando queremos manipular una tabla de datos con funciones como `filter`, `arrange`, `mutate`, `select` y `summarise` generalmente tenemos que crear muchas variables intermedias o sobreescribir muchas veces el mismo objeto. Por ejemplo, si queremos saber cómo ha cambiado el porcentaje de la población en pobreza en el estado de Jalisco en distintos periodos debemos hacer lo siguiente:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1. Filtrar los datos para quedarnos solo con los de Jalisco\npobreza_jalisco <- filter(pobreza, entidad_federativa == \"Jalisco\")\n\n# 2. Agrupar a los datos por periodo\npobreza_jalisco_agrupado_por_periodo <- group_by(pobreza_jalisco, periodo)\n\n# 3. Hacer una tabla que resuma los datos\nresumen_jalisco_periodo <- summarise(\n  pobreza_jalisco_agrupado_por_periodo,\n  pob_total = sum(poblacion, na.rm = TRUE),\n  pob_pobreza = sum(pobreza_poblacion, na.rm = TRUE)\n)\n\n# 4. Agregar la columna con el porcentaje de población en pobreza\nresumen_jalisco_periodo <- mutate(\n  resumen_jalisco_periodo, \n  porcentaje_pobreza = pob_pobreza / pob_total * 100\n)\n\n# 5. Ordenar los periodos por porcentaje de población en pobreza\narrange(resumen_jalisco_periodo, porcentaje_pobreza)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 4\n  periodo    pob_total pob_pobreza porcentaje_pobreza\n  <date>         <dbl>       <dbl>              <dbl>\n1 2020-01-01   8387145     2733157               32.6\n2 2015-01-01   7954903     2766546               34.8\n3 2010-01-01   7467401     2766652               37.0\n```\n\n\n:::\n:::\n\n\n\n\n\nNota como para hacer eso estamos creando tres variables intermedias: `pobeza_jalisco`, `pobreza_jalisco_agrupado_por_periodo` y `resumen_jalisco_periodo`, y además en el paso 4 sobrescribimos la variable `resumen_jalisco`. Estos son muchas variables y asignaciones intermedias que solo ocupan espacio en nuestra memoria, y son contraproducentes sobre todo si no las vamos a volver a usar.\n\nOtra forma como podríamos hacer lo mismo sin crear tantas variables intermedias es pasándole directamente el resultado de una función a la otra:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\narrange(\n  mutate(\n    summarise(\n      group_by(\n        filter(\n          pobreza, \n          entidad_federativa == \"Jalisco\"\n          ), \n        periodo\n        ),\n      pob_total = sum(poblacion, na.rm = TRUE),\n      pob_pobreza = sum(pobreza_poblacion, na.rm = TRUE)\n    ),\n    porcentaje_pobreza = pob_pobreza / pob_total * 100\n  ),\n  porcentaje_pobreza\n)  \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 4\n  periodo    pob_total pob_pobreza porcentaje_pobreza\n  <date>         <dbl>       <dbl>              <dbl>\n1 2020-01-01   8387145     2733157               32.6\n2 2015-01-01   7954903     2766546               34.8\n3 2010-01-01   7467401     2766652               37.0\n```\n\n\n:::\n:::\n\n\n\n\n\nSin embargo, es muy difícil leer este código ya que tiene muchísimos paréntesis. Además para entender qué hace el código uno tiene que primero ver lo que está hasta adentro de todas las funciones. Por lo que esto no es nada práctico...\n\n# El pipe `|>`\n\nUna notación más conveniente que evita que tengamos que crear muchos objetos intermedios y que tengamos que hacer muchas funciones anidadas es con el pipe `|>`.\n\nEl pipe aprovecha el hecho de que funciones como `filter`, `group_by`, `mutate`, `arrange` y `summarise` todas siguen una misma estructura ya que **todas reciben como primer argumento la tabla de datos** que van a manipular.\n\nEl pipe lo que hace es **pasar como primer argumento a una función el resultado de la operación previa**. De manera general tenemos que\n\n```         \nf(x, y) |> g(z)\n```\n\nes equivalente a:\n\n```         \nresultado <- f(x,y)\ng(resultado, z)\n```\n\no sin crear variables intermedias:\n\n```         \ng(f(x, y), z)\n```\n\nEs decir, el resultado de la función `f` es pasado como primer argumento a la función `g`.\n\nPor ejemplo, si tenemos el siguiente código:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npobreza_jalisco <- filter(pobreza, entidad_federativa == \"Jalisco\")\narrange(pobreza_jalisco, poblacion)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 375 × 6\n   entidad_federativa municipio           poblacion pobreza_poblacion\n   <chr>              <chr>                   <dbl>             <dbl>\n 1 Jalisco            Santa María del Oro      1823              1008\n 2 Jalisco            Ejutla                   1890               657\n 3 Jalisco            Ejutla                   1990               482\n 4 Jalisco            Ejutla                   2032               848\n 5 Jalisco            Santa María del Oro      2058              1317\n 6 Jalisco            Cuautla                  2151               752\n 7 Jalisco            Cuautla                  2154              1251\n 8 Jalisco            Cuautla                  2176               739\n 9 Jalisco            Santa María del Oro      2517              1860\n10 Jalisco            Guachinango              2885              1628\n# ℹ 365 more rows\n# ℹ 2 more variables: pobreza_extrema_poblacion <dbl>, periodo <date>\n```\n\n\n:::\n:::\n\n\n\n\n\nQue sin objetos intermedios sería equivalente a:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\narrange(filter(pobreza, entidad_federativa == \"Jalisco\"), poblacion)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 375 × 6\n   entidad_federativa municipio           poblacion pobreza_poblacion\n   <chr>              <chr>                   <dbl>             <dbl>\n 1 Jalisco            Santa María del Oro      1823              1008\n 2 Jalisco            Ejutla                   1890               657\n 3 Jalisco            Ejutla                   1990               482\n 4 Jalisco            Ejutla                   2032               848\n 5 Jalisco            Santa María del Oro      2058              1317\n 6 Jalisco            Cuautla                  2151               752\n 7 Jalisco            Cuautla                  2154              1251\n 8 Jalisco            Cuautla                  2176               739\n 9 Jalisco            Santa María del Oro      2517              1860\n10 Jalisco            Guachinango              2885              1628\n# ℹ 365 more rows\n# ℹ 2 more variables: pobreza_extrema_poblacion <dbl>, periodo <date>\n```\n\n\n:::\n:::\n\n\n\n\n\nCon el pipe la podemos reescribir de la siguiente manera:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npobreza |>\n  filter(entidad_federativa == \"Jalisco\") |>\n  arrange(poblacion)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 375 × 6\n   entidad_federativa municipio           poblacion pobreza_poblacion\n   <chr>              <chr>                   <dbl>             <dbl>\n 1 Jalisco            Santa María del Oro      1823              1008\n 2 Jalisco            Ejutla                   1890               657\n 3 Jalisco            Ejutla                   1990               482\n 4 Jalisco            Ejutla                   2032               848\n 5 Jalisco            Santa María del Oro      2058              1317\n 6 Jalisco            Cuautla                  2151               752\n 7 Jalisco            Cuautla                  2154              1251\n 8 Jalisco            Cuautla                  2176               739\n 9 Jalisco            Santa María del Oro      2517              1860\n10 Jalisco            Guachinango              2885              1628\n# ℹ 365 more rows\n# ℹ 2 more variables: pobreza_extrema_poblacion <dbl>, periodo <date>\n```\n\n\n:::\n:::\n\n\n\n\n\nNota como esta notación evita que hagamos un objeto intermedio y evita que nos perdamos entre tantos paréntesis y es más fácil de leer ya que podemos ver qué hace de arriba a abajo y de izquierda a derecha:\n\n> tomamos la tabla pobreza y la filtramos para quedamos solo con los datos de Jalisco, luego esa tabla la ordenamos de acuerdo a los valores de la columna población\n\nAsí el ejemplo que teníamos en la sección anterior lo podemos reescribir con pipes de la siguiente manera:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npobreza |>\n  filter(entidad_federativa == \"Jalisco\") |>\n  group_by(periodo) |>\n  summarise(\n    pob_total = sum(poblacion, na.rm = TRUE),\n    pob_pobreza = sum(pobreza_poblacion, na.rm = TRUE)\n  ) |>\n  mutate(\n    porcentaje_pobreza = pob_pobreza / pob_total * 100\n  ) |>\n  arrange(porcentaje_pobreza)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 4\n  periodo    pob_total pob_pobreza porcentaje_pobreza\n  <date>         <dbl>       <dbl>              <dbl>\n1 2020-01-01   8387145     2733157               32.6\n2 2015-01-01   7954903     2766546               34.8\n3 2010-01-01   7467401     2766652               37.0\n```\n\n\n:::\n:::\n\n\n\n\n\n# Ejercicios\n\n## Ejercicio 1\n\nReescribe el siguiente código usando pipes:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npobreza_2020 <- filter(pobreza, periodo == '2020-01-01')\nsum(pull(pobreza_2020, poblacion), na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 127409241\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Reescribe aquí el código\n```\n:::\n\n\n\n\n\n## Ejercicio 2\n\nDescribe con tus propias palabras qué hace el siguiente código. ¿Qué datos incluye el resultado?\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npobreza |>\n  filter(entidad_federativa == \"Chiapas\") |>\n  group_by(municipio) |>\n  summarise(promedio_pob_pobreza = mean(pobreza_poblacion, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 124 × 2\n   municipio                 promedio_pob_pobreza\n   <chr>                                    <dbl>\n 1 Acacoyagua                              16514.\n 2 Acala                                   23020.\n 3 Acapetahua                              24300 \n 4 Aldama                                   6643.\n 5 Altamirano                              28898.\n 6 Amatenango de la Frontera               23978.\n 7 Amatenango del Valle                     9462 \n 8 Amatán                                  20610.\n 9 Angel Albino Corzo                      24053.\n10 Arriaga                                 31219.\n# ℹ 114 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n## Ejercicio 3\n\nReescribe el siguiente código usando pipes:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npobreza_2020 <- filter(pobreza, periodo == '2020-01-01')\npobreza_2020_agrupado_por_entidad <- group_by(pobreza_2020, entidad_federativa)\nresumen_pobreza_2020_entidad <- summarise(\n  pobreza_2020_agrupado_por_entidad,\n  pob_total = sum(poblacion, na.rm = TRUE),\n  pob_pobreza = sum(pobreza_poblacion, na.rm = TRUE)\n)\nresumen_pobreza_2020_entidad <- mutate(\n  resumen_pobreza_2020_entidad,\n  porcentaje_pobreza = pob_pobreza / pob_total * 100\n)\n\narrange(resumen_pobreza_2020_entidad, porcentaje_pobreza)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 32 × 4\n   entidad_federativa   pob_total pob_pobreza porcentaje_pobreza\n   <chr>                    <dbl>       <dbl>              <dbl>\n 1 Nuevo León             5460396     1075563               19.7\n 2 Baja California        3742465      865158               23.1\n 3 Coahuila de Zaragoza   3139003      740180               23.6\n 4 Chihuahua              3892117      992479               25.5\n 5 Baja California Sur     885465      242190               27.4\n 6 Aguascalientes         1373242      378118               27.5\n 7 Colima                  786016      218604               27.8\n 8 Sinaloa                3111958      879250               28.3\n 9 Nayarit                1340427      409311               30.5\n10 Sonora                 3136574      978307               31.2\n# ℹ 22 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Reescribe aquí el código\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}