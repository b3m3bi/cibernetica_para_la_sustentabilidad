{
  "hash": "695902f272468aeaf32c6d6dd3334b96",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"03 - Cadenas de texto y comentarios\"\noutput: html_notebook\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n# Introducci√≥n\n\nHasta ahora hemos trabajado con n√∫mero en R: podemos sumarlos, restarlos y hacer operaciones matem√°ticas. Pero en R no todo son n√∫meros: tambi√©n podemos trabajar con **texto**. El texto recibe el nombre de **cadena de caracteres** o, en ingl√©s, **string**. Adem√°s de crear cadenas muchas veces tambi√©n es √∫til crear **comentarios** en el c√≥digo.\n\nEn este notebook vemos c√≥mo crear strings y comentarios en R.\n\n**Objetivos**\n\n-   Crear cadenas de caracteres en R\n-   Utilizar algunas funciones b√°sicas en R para trabajar con cadenas\n-   Crear comentarios en el c√≥digo y comentar y descomenar l√≠neas de c√≥digo\n\n# C√≥mo escribir un string\n\nUn **string** siempre se escribe entre **comillas**. Pueden ser comillas dobles (`\" \"`) o comillas simples (`' '`).\n\nPor ejemplo:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\"Soy una cadena de texto y uso dobles comillas\"\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Soy una cadena de texto y uso dobles comillas\"\n```\n\n\n:::\n\n```{.r .cell-code}\n'Tambi√©n soy una cadena de texto pero yo uso cadenas dobles'\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Tambi√©n soy una cadena de texto pero yo uso cadenas dobles\"\n```\n\n\n:::\n:::\n\n\n\n\nSi no le ponemos comillas a nuestras cadenas de texto R se va a confundir y te va a mandar un error:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nEsto va a dar error porque R piensa que son comandos para ejecutar\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in parse(text = input): <text>:3:6: unexpected symbol\n2: \n3: Esto va\n        ^\n```\n\n\n:::\n:::\n\n\n\n\nTen cuidado de cerrar tus cadenas, es decir, de poner las comillas finales ya que si no las pones R va a pensar que a√∫n no terminas la cadena. Por ejemplo al ejecutar la celda de abajo podr√°s ver que en la consola te muestra un signo de `+` eso significa que R est√° esperando m√°s instrucciones porque piensa que no has terminado. Para hacer que R regrese da click en la consola y da click en `ESCAPE`, debe aparecerte un s√≠mbolo de mayor qu√© `>`, lo cual significa que R est√° listo para escuchar tu siguiente instrucci√≥n. Otra forma de hacer que R regrese es ejecutando de nuevo la celda y te va a mandar un error, pero R va a regresar.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\"A esta cadena le faltan las comillas finales\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in parse(text = input): <text>:2:1: unexpected INCOMPLETE_STRING\n2: \"A esta cadena le faltan las comillas finales\n3: \n   ^\n```\n\n\n:::\n:::\n\n\n\n\n# Los strings no son n√∫meros\n\nComo ya vimos previamente si escribimos un n√∫mero sin comillas, R lo interpreta como un n√∫mero:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2 + 3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n:::\n\n\n\n\nPero si lo ponemos entre comillas, se convierte en texto, y ya no se puede sumar:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\"2\" + \"3\"\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in \"2\" + \"3\": non-numeric argument to binary operator\n```\n\n\n:::\n:::\n\n\n\n\nAqu√≠ R nos da un error, porque `\"2\"` y `\"3\"` son **texto**, no n√∫meros.\n\n# Un string puede contener palabras, frases y s√≠mbolos\n\nLos strings pueden ser tan cortos o largos como queramos y pueden contener n√∫meros, acentos, caracteres especiales emojis o ser vacios.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\"Soy una cadena con n√∫meros (123432), acentos (rat√≥√≥√≥√≥n), emojis (üòÉ) y caracteres especiales (¬°!?#$$%^)\"\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Soy una cadena con n√∫meros (123432), acentos (rat√≥√≥√≥√≥n), emojis (üòÉ) y caracteres especiales (¬°!?#$$%^)\"\n```\n\n\n:::\n:::\n\n\n\n\n# Concatenar strings (unir texto)\n\nR tiene una funci√≥n llamada `paste()` que sirve para **unir varios strings**.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npaste(\"Hola\", \"mundo\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Hola mundo\"\n```\n\n\n:::\n:::\n\n\n\n\nPodemos unir m√°s de dos cadenas de texto:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npaste(\"¬°\", \"Estoy\", \"aprendiendo\", \"R\", \"!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"¬° Estoy aprendiendo R !\"\n```\n\n\n:::\n:::\n\n\n\n\n# Imprimir cadenas de texto\n\nSi queremos decirle a R expl√≠citamente que imprima algo podemos usar la funci√≥n `print()` la cual ya vimos previamente:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(\"Ya me aburr√≠ de aprender cadenas de texto\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Ya me aburr√≠ de aprender cadenas de texto\"\n```\n\n\n:::\n:::\n\n\n\n\n# Comentarios\n\nLos comentarios son l√≠neas empiezan con el s√≠mbolo de gato (`#`) y son l√≠neas que R va a ignorar:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Soy un comentario y R me va a ignorar.\n\n###### Yo tambi√©n soy un comentario\n```\n:::\n\n\n\n\n# Los comentarios son √∫tiles para explicar qu√© hace el c√≥digo\n\nLos comentarios se suelen usar para explicar qu√© hace el c√≥digo, esto es √∫til para que otras personas o nuestro yo del futuro entienda qu√© hace el c√≥digo:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# La siguiente l√≠nea imprime en la consola una cadena de texto\nprint(\"Me gustan los elotes.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Me gustan los elotes.\"\n```\n\n\n:::\n:::\n\n\n\n\n# Los comentarios son √∫tiles para evitar que algunas lineas de c√≥digo se ejecuten\n\nOtro uso de los comentarios es hacer que una l√≠nea de c√≥digo sea ignorada por R y no se ejecute. Por ejemplo, en la siguiente celda de c√≥digo solo se ejecutan la primera y √∫ltima instrucci√≥n:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(\"Me ejecuto\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Me ejecuto\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# print(\"Esta l√≠nea est√° comentada y no se va a ejecutar\")\n\n# print(\"Esta l√≠nea tambi√©n est√° comentada y no se ejecuta\")\n\nprint(\"Esta s√≠ se va a ejecutar\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Esta s√≠ se va a ejecutar\"\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}