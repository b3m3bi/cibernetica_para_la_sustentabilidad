{
  "hash": "62d0e8cc4ad99c44252078d03a79a9ec",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"06 - Funciones\"\noutput: html_notebook\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n\n# Introducción\n\nHasta ahora hemos trabajado con *números*, *cadenas de texto*, *variables* y *vectores*. También hemos usado algunas funciones como `print()`, `paste()`, `mean()` o `length()`.\n\nPero ¿qué son exactamente las **funciones** en R? En este notebook exploramos qué son las funciones.\n\n**Objetivos**\n\n-   Reconocer la sintáxis para ejecutar un función en R.\n-   Reconocer el concepto de argumentos de una función.\n-   Identificar algunas funciones básicas de R.\n\n# ¿Qué es una función?\n\nUna **función** es un bloque de código que realiza una tarea específica. R tiene varias funciones predefinidas que podemos usar. Para usar una función debemos poner el nombre de la función seguida por paréntesis, dentro de los cuales ponemos los **argumentos** de la función separados por comas:\n\n```         \nnombreFuncion(argumento1, argumento2, argumento3)\n```\n\nUn ejemplo que ya conocemos es la función `print`:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(\"Hola mundo\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Hola mundo\"\n```\n\n\n:::\n:::\n\n\n\n\n\nAquí, `print` es el nombre de la función y `\"Hola mundo\"` es el argumento que le damos.\n\n# Argumentos de una función\n\nA algunas funciones reciben sólo un argumento y si les pasamos más nos arrojan un **error**. Por ejemplo la función `print` se enoja si le pasamos más de un argumento:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(\"Hola\", \"¿cómo te va?\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in print.default(\"Hola\", \"¿cómo te va?\"): NAs introduced by coercion\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in print.default(\"Hola\", \"¿cómo te va?\"): invalid printing digits -2147483648\n```\n\n\n:::\n:::\n\n\n\n\n\nA otras funciones podemos pasarles muchos argumentos del mismo tipo, por ejemplo a `paste` le podemos pasar muchos strings y nos los junta todos:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npaste(\"Hola\", \"¿cómo te va?\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Hola ¿cómo te va?\"\n```\n\n\n:::\n:::\n\n\n\n\n\nOtras funciones reciben argumentos que de acuerdo a su posición significan distintas cosas. Por ejemplo, la función `round` nos permite redondear números hasta cierta cantidad de decimales que queramos:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(3.14159, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3.14\n```\n\n\n:::\n:::\n\n\n\n\n\nAquí:\\\n- `3.14159` es el número a redondear, y\\\n- `2` que indica cuántos decimales queremos.\n\nCuando una función tiene varios argumentos que significan distintas cosas para, estos generalmente tienen un nombre. Por ejemplo, el segundo argumento de la función `round` se llama `digits`. Cuando usamos funciones que tienen muchos argumentos es más conveniente pasar los valores poniendo el nombre del argumento explicitamente:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(3.14159, digits = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3.14\n```\n\n\n:::\n:::\n\n\n\n\n\nAdemás, nota que muchas funciones dan valores por defecto a algunos de sus argumentos. Por ejemplo, si a la función `round` no le pasamos el segundo argumento entonces toma por defecto un valor de `digits = 0`:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(3.14159)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\n\n\n\n# Un argumento muy útil de varias funciones\n\nAlgo muy común cuando trabajas con datos es que para algunas observaciones no tengas el dato. Esto muchas veces se indica con un `NA` («Not Available»). Por ejemplo, si muestreamos seis especímenes pero por alguna razón no tenemos el dato de uno podemos registrarlo así:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiametro_arboles <- c(9.32, 8.5, 11.3, NA, 10.11, 9.47)\n```\n:::\n\n\n\n\n\nPodríamos calcular el promedio, máximo y mínimo con las funciones que ya vimos, sin embargo, obtenemos algo raro:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(diametro_arboles)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NA\n```\n\n\n:::\n\n```{.r .cell-code}\nmax(diametro_arboles)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NA\n```\n\n\n:::\n\n```{.r .cell-code}\nmin(diametro_arboles)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NA\n```\n\n\n:::\n:::\n\n\n\n\n\nR evita que calculemos algunos estadísticos de datos incompletos. Sin embargo, si nosotros queremos calcular un estadístico usando solamente los valores que sí conocemos podemos usar el argumento `na.rm = TRUE`:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(diametro_arboles, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9.74\n```\n\n\n:::\n\n```{.r .cell-code}\nmax(diametro_arboles, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 11.3\n```\n\n\n:::\n\n```{.r .cell-code}\nmin(diametro_arboles, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8.5\n```\n\n\n:::\n:::\n\n\n\n\n\n# Usar funciones dentro de otras funciones\n\nNota como una función se puede usar dentro de otra función:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(paste(\"Mi número favorito es el\", max(c(37, 25))))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Mi número favorito es el 37\"\n```\n\n\n:::\n:::\n\n\n\n\n\nAquí lo que hace R es primero ejecutar las funciones que están más adentro (más anidadas) e irle pasando su resultado a las funciones que le siguen como argumento. En este caso R ejecuta las funciones en el siguiente orden\n\n1. crear el vector `c(37, 25)`\n2. tomar el número máximo del vector `(37, 25)`\n3. juntar con `paste()` el texto \"Mi número favorito es el\" y el número 37\n4. imprimir el texto completo en la pantalla con `print()`\n\n# Buscar ayuda sobre cómo funciona una función\n\nPara saber cuáles son los argumentos que usa una función podemos **consultar su documentación**. La documentación es una explicación técnica con todos los detalles sobre una función.\n\nPuedes buscar la documentación de dos maneras en RStudio:\n\n1.  Introduce en la consola el nombre de la función precedido por un signo de interrogación `?`. La documentación se abrirá en el panel inferior derecho de RStudio.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?mean\n```\n:::\n\n\n\n\n\n2.  En el panel inferior derecho de RStudio da click en la pestaña **Help** y en la lupa superior derecha del panel busca el nombre de la función.\n\n# Crear funciones\n\nAdemás de usar funciones que ya existen también podemos podemos definir funciones. En este curso no crearemos funciones, pero es importante que sepas que podemos crear nuestras funciones personalizadas para hacer cualquier cosa que queramos. Esto es muy útil ya que hace que podamos reciclar código y ahorrarnos tareas repetitivas. Por ejemplo,\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# función que convierte grados Celsius a Fahrenheit\ncelsius_a_fahrenheit <- function(celsius) {\n  fahrenheit <- celsius * 9/5 + 32\n  return(fahrenheit)\n}\n\ncelsius_a_fahrenheit(25)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 77\n```\n\n\n:::\n:::\n\n\n\n\n\n# Ejercicio\n\nUsa la función `paste()` para imprimir en el siguiente formato la secuencia de DNA: `ATG-TAC-GCG-AAA-TAC-GAC-CAG-ATA-GAT-ACA`. Busca en la documentación el argumento de la función que te puede servir para formatear tu texto.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncodones <- c('ATG','TAC','GCG','AAA','TAC','GAC','CAG','ATA','GAT','ACA')\n\n# Escribe aquí tu respuesta\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}