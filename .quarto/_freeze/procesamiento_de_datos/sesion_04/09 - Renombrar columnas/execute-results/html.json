{
  "hash": "bb6af3313c341f9561635d88eb062c07",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"09 - Renombrar columnas\"\noutput: html\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n# Introducción\n\nPara poder explorar nuestros datos fácilmente necesitamos que las columnas de nuestra tabla de datos tengan nombres apropiados. En este notebook exploramos cómo renombrar las columnas de nuestras tablas de datos.\n\n**Objetivos**\n\n-   Utilizar funciones para renombrar las columnas de una tabla de datos\n\n# Cargar los datos\n\nEn este notebook seguimos usando el paquete tidyverse:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n:::\n\n\n\n\nEn este notebook seguiremos usando los datos de pokemón que cargamos en el notebook previo:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npokemon <- read_csv(\"./pokemon.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 800 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): Name, Type 1, Type 2\ndbl (9): #, Total, HP, Attack, Defense, Sp. Atk, Sp. Def, Speed, Generation\nlgl (1): Legendary\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\npokemon\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 800 × 13\n     `#` Name   `Type 1` `Type 2` Total    HP Attack Defense `Sp. Atk` `Sp. Def`\n   <dbl> <chr>  <chr>    <chr>    <dbl> <dbl>  <dbl>   <dbl>     <dbl>     <dbl>\n 1     1 Bulba… Grass    Poison     318    45     49      49        65        65\n 2     2 Ivysa… Grass    Poison     405    60     62      63        80        80\n 3     3 Venus… Grass    Poison     525    80     82      83       100       100\n 4     3 Venus… Grass    Poison     625    80    100     123       122       120\n 5     4 Charm… Fire     <NA>       309    39     52      43        60        50\n 6     5 Charm… Fire     <NA>       405    58     64      58        80        65\n 7     6 Chari… Fire     Flying     534    78     84      78       109        85\n 8     6 Chari… Fire     Dragon     634    78    130     111       130        85\n 9     6 Chari… Fire     Flying     634    78    104      78       159       115\n10     7 Squir… Water    <NA>       314    44     48      65        50        64\n# ℹ 790 more rows\n# ℹ 3 more variables: Speed <dbl>, Generation <dbl>, Legendary <lgl>\n```\n\n\n:::\n:::\n\n\n\n\n# Renombrar columnas\n\nPara renombrar las columnas de una tabla de datos usamos la función `rename`, por ejemplo, si queremos renombrar la columna `Name` a `nombre` hacemos lo siguiente:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrename(pokemon, nombre = Name)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 800 × 13\n     `#` nombre `Type 1` `Type 2` Total    HP Attack Defense `Sp. Atk` `Sp. Def`\n   <dbl> <chr>  <chr>    <chr>    <dbl> <dbl>  <dbl>   <dbl>     <dbl>     <dbl>\n 1     1 Bulba… Grass    Poison     318    45     49      49        65        65\n 2     2 Ivysa… Grass    Poison     405    60     62      63        80        80\n 3     3 Venus… Grass    Poison     525    80     82      83       100       100\n 4     3 Venus… Grass    Poison     625    80    100     123       122       120\n 5     4 Charm… Fire     <NA>       309    39     52      43        60        50\n 6     5 Charm… Fire     <NA>       405    58     64      58        80        65\n 7     6 Chari… Fire     Flying     534    78     84      78       109        85\n 8     6 Chari… Fire     Dragon     634    78    130     111       130        85\n 9     6 Chari… Fire     Flying     634    78    104      78       159       115\n10     7 Squir… Water    <NA>       314    44     48      65        50        64\n# ℹ 790 more rows\n# ℹ 3 more variables: Speed <dbl>, Generation <dbl>, Legendary <lgl>\n```\n\n\n:::\n:::\n\n\n\n\nSin embargo, nota que si no guardamos nuestra nueva tabla renombrada nuestra tabla se queda igual:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npokemon\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 800 × 13\n     `#` Name   `Type 1` `Type 2` Total    HP Attack Defense `Sp. Atk` `Sp. Def`\n   <dbl> <chr>  <chr>    <chr>    <dbl> <dbl>  <dbl>   <dbl>     <dbl>     <dbl>\n 1     1 Bulba… Grass    Poison     318    45     49      49        65        65\n 2     2 Ivysa… Grass    Poison     405    60     62      63        80        80\n 3     3 Venus… Grass    Poison     525    80     82      83       100       100\n 4     3 Venus… Grass    Poison     625    80    100     123       122       120\n 5     4 Charm… Fire     <NA>       309    39     52      43        60        50\n 6     5 Charm… Fire     <NA>       405    58     64      58        80        65\n 7     6 Chari… Fire     Flying     534    78     84      78       109        85\n 8     6 Chari… Fire     Dragon     634    78    130     111       130        85\n 9     6 Chari… Fire     Flying     634    78    104      78       159       115\n10     7 Squir… Water    <NA>       314    44     48      65        50        64\n# ℹ 790 more rows\n# ℹ 3 more variables: Speed <dbl>, Generation <dbl>, Legendary <lgl>\n```\n\n\n:::\n:::\n\n\n\n\nPara que los cambios se queden guardados hay que crear una nueva variable o **sobreescribir** el valor de la variable que ya teníamos:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npokemon <- rename(pokemon, nombre = Name)\npokemon\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 800 × 13\n     `#` nombre `Type 1` `Type 2` Total    HP Attack Defense `Sp. Atk` `Sp. Def`\n   <dbl> <chr>  <chr>    <chr>    <dbl> <dbl>  <dbl>   <dbl>     <dbl>     <dbl>\n 1     1 Bulba… Grass    Poison     318    45     49      49        65        65\n 2     2 Ivysa… Grass    Poison     405    60     62      63        80        80\n 3     3 Venus… Grass    Poison     525    80     82      83       100       100\n 4     3 Venus… Grass    Poison     625    80    100     123       122       120\n 5     4 Charm… Fire     <NA>       309    39     52      43        60        50\n 6     5 Charm… Fire     <NA>       405    58     64      58        80        65\n 7     6 Chari… Fire     Flying     534    78     84      78       109        85\n 8     6 Chari… Fire     Dragon     634    78    130     111       130        85\n 9     6 Chari… Fire     Flying     634    78    104      78       159       115\n10     7 Squir… Water    <NA>       314    44     48      65        50        64\n# ℹ 790 more rows\n# ℹ 3 more variables: Speed <dbl>, Generation <dbl>, Legendary <lgl>\n```\n\n\n:::\n:::\n\n\n\n\nNota como los nombres de algunas variables de nuestra tabla de datos tienen espacios y caracteres especiales como el gato `#`. Aunque es posible usar espacios y caracteres especiales para nombrar columnas es una mala práctica y hace más difícil escribir el código. **Lo más recomendable es seguir las mismas reglas que usamos para nombrar variables al momento de nombrar columnas** de un conjunto de datos. Por ejemplo, podemos renombrar nuestras columnas `Type 1` y `Type 2` para quitarles el espacio y la mayúscula (también nota como podemos renombrar varias columnas al mismo tiempo con la función `rename`):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npokemon <- rename(\n  pokemon,\n  tipo_1 = \"Type 1\",\n  tipo_2 = \"Type 2\"\n)\npokemon\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 800 × 13\n     `#` nombre     tipo_1 tipo_2 Total    HP Attack Defense `Sp. Atk` `Sp. Def`\n   <dbl> <chr>      <chr>  <chr>  <dbl> <dbl>  <dbl>   <dbl>     <dbl>     <dbl>\n 1     1 Bulbasaur  Grass  Poison   318    45     49      49        65        65\n 2     2 Ivysaur    Grass  Poison   405    60     62      63        80        80\n 3     3 Venusaur   Grass  Poison   525    80     82      83       100       100\n 4     3 VenusaurM… Grass  Poison   625    80    100     123       122       120\n 5     4 Charmander Fire   <NA>     309    39     52      43        60        50\n 6     5 Charmeleon Fire   <NA>     405    58     64      58        80        65\n 7     6 Charizard  Fire   Flying   534    78     84      78       109        85\n 8     6 Charizard… Fire   Dragon   634    78    130     111       130        85\n 9     6 Charizard… Fire   Flying   634    78    104      78       159       115\n10     7 Squirtle   Water  <NA>     314    44     48      65        50        64\n# ℹ 790 more rows\n# ℹ 3 more variables: Speed <dbl>, Generation <dbl>, Legendary <lgl>\n```\n\n\n:::\n:::\n\n\n\n\nPodemos hacer esto manualmente para cada variable, pero hay una forma más rápida y fácil.\n\n## Renombrar automáticamente las columnas con nombres consistentes\n\nExiste un paquete muy práctico que tiene una función que nos puede ayudar a renombrar consistentemente nuestras variables, este se llama `janitor` y la función en cuestión se llama `clean_names`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"janitor\")\n\npokemon <- janitor::clean_names(pokemon)\npokemon\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 800 × 13\n   number nombre    tipo_1 tipo_2 total    hp attack defense sp_atk sp_def speed\n    <dbl> <chr>     <chr>  <chr>  <dbl> <dbl>  <dbl>   <dbl>  <dbl>  <dbl> <dbl>\n 1      1 Bulbasaur Grass  Poison   318    45     49      49     65     65    45\n 2      2 Ivysaur   Grass  Poison   405    60     62      63     80     80    60\n 3      3 Venusaur  Grass  Poison   525    80     82      83    100    100    80\n 4      3 Venusaur… Grass  Poison   625    80    100     123    122    120    80\n 5      4 Charmand… Fire   <NA>     309    39     52      43     60     50    65\n 6      5 Charmele… Fire   <NA>     405    58     64      58     80     65    80\n 7      6 Charizard Fire   Flying   534    78     84      78    109     85   100\n 8      6 Charizar… Fire   Dragon   634    78    130     111    130     85   100\n 9      6 Charizar… Fire   Flying   634    78    104      78    159    115   100\n10      7 Squirtle  Water  <NA>     314    44     48      65     50     64    43\n# ℹ 790 more rows\n# ℹ 2 more variables: generation <dbl>, legendary <lgl>\n```\n\n\n:::\n:::\n\n\n\n\n# Ejercicio\n\n1.  Usa la función `rename` para cambiarle el nombre a la columna `year_released` a `year` de la tabla de datos `pixar`.\n2.  Usa la función `janitor::clean_names` para que tu tabla de datos tenga nombres de columna consistentes.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npixar <- read_csv(\"pixar-movies.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 28 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): movie, Director\ndbl (4): year_released, Length_min, Rotten tomatoes rating, total_sales_mill...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\n# Escribe aquí tu respuesta\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}