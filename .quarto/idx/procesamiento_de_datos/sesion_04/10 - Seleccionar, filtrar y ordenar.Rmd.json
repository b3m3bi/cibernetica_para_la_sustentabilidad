{"title":"10 - Seleccionar, filtrar y ordenar","markdown":{"yaml":{"title":"10 - Seleccionar, filtrar y ordenar","output":"html","editor_options":{"chunk_output_type":"console"}},"headingText":"Introducción","containsRefs":false,"markdown":"\n\n\nPara empezar a contestar preguntas útiles con los datos lo más básico es seleccionar, filtrar y ordenar nuestras tablas. En este notebook explicamos cómo realizar estas acciones.\n\n**Objetivos**\n\n-   Utilizar funciones para seleccionar columnas\n-   Utilizar funciones para filtrar datos\n-   Utilizar funciones para reordenar las filas de una tabla\n\n# Preparar los datos\n\nEn este notebook vamos a utilizar los datos de pokemón que preparamos en los notebooks anteriores. También cargamos el paquete tidyverse que vamos a usar.\n\n```{r}\n\nlibrary(tidyverse)\n\n# Leer los datos\npokemon <- read_csv(\"pokemon.csv\")\n\n# Limpiar los nombres de columnas\npokemon <- janitor::clean_names(pokemon)\npokemon\n\n```\n\n# Seleccionar una columna como vector\n\nPara seleccionar los valores de una columna como si fuera un vector podemos usar la función `pull`:\n\n```{r}\n\npull(pokemon, name)\n\n```\n\nPodemos guardar los valores en una variable y usarlos en otras funciones que ya conocemos:\n\n```{r}\n\nnombres <- pull(pokemon, name)\n\npaste(\"Hola soy\", nombres)\n\n```\n\n# Seleccionar columnas\n\nPara reducir el número de columnas de nuestros datos y quedarnos solo con las variables que nos interesan podemos usar la función `select`.\n\nRecordemos cuales son las columnas de nuestra tabla de datos:\n\n```{r}\n\nnames(pokemon)\n\n```\n\nSi solo nos queremos quedar con las columnas `name`, `type_1`, `type_2` y `total` usamos la función `select`:\n\n```{r}\n\nselect(pokemon, name, type_1, type_2, total)\n\n```\n\n# Ver los valores únicos de una columna\n\nAlgo muy útil cuando trabajamos con datos es saber todos los valores que una variable puede tomar. Por ejemplo, si nos interesar saber cuáles son todos los posibles tipos de pokemón. Para ello podemos usar la función `distinct`:\n\n```{r}\n\ndistinct(pokemon, type_1)\n\n```\n\n# Operadores de comparación\n\nAntes de poder filtrar datos necesitamos saber qué son los **operadores de comparación**. Los operadores lógicos son símbolos en R que nos sirven para comparar valores y decirnos si cumplen o no con el criterio que queremos. Cuando si lo cumplen nos arrojan un valor de `TRUE` y cuando no lo cumplen arrojan un valor de `FALSE`. Existen 6 operadores de comparación:\n\n1.  `==`: igual\n2.  `!=`: no igual\n3.  `>` mayor qué\n4.  `<` menor qué\n5.  `>=` mayor o igual qué\n6.  `<=` menor o igual qué\n\nEstos se colocan entre dos valores que se quieren comparar y cuando la condición se cumple nos arrojan `TRUE`:\n\n```{r}\n\n2 == 2\n2 != 1\n2 > 1\n1 < 2\n2 >= 2\n2 <= 2\n\n```\n\nY nos arrojan `FALSE` cuando las condiciones no se cumplen:\n\n```{r}\n\n2 == 1\n2 != 2\n1 > 2\n2 < 1\n1 >= 2\n2 <= 1\n\n```\n\nLos operadores de igualdad y desigualdad también sirven para comparar si dos cadenas de texto son iguales o no:\n\n```{r}\n\npalabra <- \"hola\" \n\npalabra == \"hola\"\npalabra == \"adiós\"\npalabra != \"hola\"\npalabra != \"adiós\"\n\n```\n\n# Operadores lógicos\n\nOtros operadores que necesitamos para filtrar datos son los **operadores lógicos**. Hay 3 operadores lógicos:\n\n1.  `&`: **Y**\n2.  `|`: **O**\n3.  `!`: **NO**\n\nEl operador «Y» nos regresa `TRUE` solo si las dos expresiones que lo rodean son verdaderas:\n\n```{r}\n\nTRUE & TRUE \nTRUE & FALSE \nFALSE & FALSE\n\npalabra <- \"hola\"\n\npalabra == \"hola\" & 1 == 1 \npalabra == \"hola\" & 1 != 1\npalabra == \"adios\" & 1 < 1\n```\n\nEl operador «O» nos regres `TRUE` si al menos una de las dos expresiones que lo rodean es verdadera:\n\n```{r}\n\nTRUE | TRUE \nTRUE | FALSE \nFALSE | FALSE\n\npalabra <- \"hola\"\n\npalabra == \"hola\" | 1 == 1 \npalabra == \"hola\" | 1 != 1\npalabra == \"adios\" | 1 < 1\n\n```\n\nFinalmente el operador *NO* inveirte el valor de una expresión, es decir, si la expresión es verdadera la cambia a falsa, y si la expresión es falsa la cambia a verdadera:\n\n```{r}\n\n! TRUE\n! FALSE\n\n! 1 == 1\n! 1 < 1\n\n```\n\n# Filtrar datos\n\nUna primera operación básica para empezar a analizar nuestros datos es filtrarlos. Filtrar significa quedarnos solo con las filas que cumplen un criterio que nosotros le demos. Por ejemplo podriamos queres solo quedarnos con los pokemón cuyo tipo 1 es planta (`Grass`). Para eso usamos la función `filter` y el operador de comparación de igualdad:\n\n```{r}\n\npokemon_planta <- filter(pokemon, type_1 == \"Grass\")\n\nprint(pokemon_planta, n = 100)\n\n\n```\n\nLa función `filter` como primer argumento recibe el nombre de la tabla de datos que queremos filtrar, y como segundo argumento recibe el criterio que queremos usar. En este caso queremos que el valor que tiene la fila en la columna `type_1` sea igual a la cadena `\"Grass\"`.\n\nAdemás de filtrar por un solo critero podemos agregar más criterios usando los operadores lógicos. Por ejemplo, podemos filtrar y quedarnos solo con los pokemón de tipo planta y veneno:\n\n```{r}\n\npokemon_planta_veneno <- filter(pokemon, type_1 == \"Grass\" & type_2 == \"Poison\")\nprint(pokemon_planta_veneno, n = 100)\n\n```\n\nEn la función filter podemos usar cualquier operador de comparación y operador lógico. Por ejemplo, podemos filtrar y quedarnos sólo con los pokemón que tienen tipo 1 Pasto o Agua:\n\n```{r}\n\nfilter(pokemon, type_1 == \"Grass\" | type_1 == \"Water\")\n\n```\n\nAdemás podemos usar los otros operadores de comparación que funcionan con valores numéricos. Por ejemplo, podemos quedarnos sólo con los pokemón con un puntaje `total` mayor a 700:\n\n```{r}\n\nfilter(pokemon, total >= 700)\n\n```\n\nO podemos quedarnos sólo con los pokemón con un puntaje `total` mayor a 700 y que son de la primera generación:\n\n```{r}\n\nfilter(pokemon, total >= 700 & generation == 1)\n\n```\n\n# Ordenar las filas\n\nAlgo muy útil para explorar los datos en una tabla es ordenar las filas de acuerdo a un criterio. Por ejemplo, podemos ordenar los pokemón de acuerdo a su poder `total` para conocer cuales son los pokemón más débiles. Para eso usamos la función `arrange`, la cual nos ordena los datos de menor a mayor con base en los valores de una columna:\n\n```{r}\n\narrange(pokemon, total)\n\n```\n\nSi deseamos ordenarlos de mayor a menor podemos usar la función `desc` en el nombre de la columna que usamos como criterio:\n\n```{r}\n\narrange(pokemon, desc(total))\n\n```\n\nPodemos aplicar más de un criterio para ordenar cuando hay empates. Por ejemplo, podemos ordenar a los pokemón desde los más poderosos a los menos poderosos y cuando hay empates poner primero a los más rápidos:\n\n```{r}\n\narrange(pokemon, desc(total), desc(speed))\n\n```\n\n# Filtrar y ordenar\n\nPodemos combinar los filtros y ordenamientos de los datos. Por ejemplo, podemos ordenar de más poderoso a menos poderoso sólamente a los pokemón de tipo eléctrico:\n\n```{r}\n\npokemon_electricos <- filter(pokemon, type_1 == \"Electric\" | type_2 == \"Electric\")\n\narrange(pokemon_electricos, desc(total))\n\n```\n\nNota como esto mismo también lo podemos hacer en una sola línea metiendo una función dentro de otra sin hacer objetos intermedios:\n\n```{r}\n\narrange(filter(pokemon, type_1 == \"Electric\" | type_2 == \"Electric\"), desc(total))\n\n```\n\n# Ejercicios\n\nPara estos ejercicios trabajamos con los datos de películas de pixar que usamos en notebooks pasados. Ejecuta el la celda siguiente para tener tus datos disponibles para los ejercicios:\n\n```{r}\n\npixar <- read_csv(\"pixar-movies.csv\")\npixar <- rename(pixar, year = year_released)\npixar <- janitor::clean_names(pixar)\npixar\n\n```\n\n## Ejercicio 1\n\n1.  Selecciona con la función `pull` la columna con los títulos de la película y guárdalo en una variable que se llame `titulos_pelicula`\n2.  Usa la función `paste` para que con cada nombre de la película obtengamos textos de la forma: `\"Película: Toy Story\"`\n\n```{r}\n# Escribe aquí tu respuesta\n\n\n```\n\n## Ejercicio 2\n\n1.  Selecciona únicamente las columnas con la información del nombre de la película y el director con la función `select`\n2.  Guarda tu resultado en una variable que se llame `pixar_directores`.\n3.  Usa la función `print` con un argumento de `n = 100` para imprimir toda la tabla en la consola\n4.  Usa la función `distinct` para ver todos los directores distintos que ha habido en las películas de pixar.\n\n```{r}\n# Escribe aquí tu respuesta\n\n\n\n```\n\n## Ejercicio 3\n\nUsa las funciones `filter`, `arrange` y `desc` para responder a las siguientes preguntas sobre las películas de pixar\n\n1.  ¿Cuál es la película de pixar más corta?\n\n```{r}\n# Escribe aquí tu código\n\n\n\n```\n\n2.  ¿Cuál es la película de pixar más larga?\n\n```{r}\n# Escribe aquí tu código\n\n\n\n```\n\n3.  ¿Cuáles son las películas que han tenido una menor calificación en «Rotten tomatoes»?\n\n```{r}\n# Escribe aquí tu código\n\n\n\n```\n\n4.  ¿Cuáles son las películas que han tenido una mayor calificación\n\n```{r}\n# Escribe aquí tu código\n\n\n\n```\n\n5.  ¿Cuál es la película que más ha vendido en taquilla?\n\n```{r}\n# Escribe aquí tu código\n\n\n\n```\n\n6.  ¿Cuál es la película que menos ha vendido en taquillas?\n\n```{r}\n# Escribe aquí tu código\n\n\n\n```\n\n7.  ¿Cuál fue la película que más vendió en taquillas considerando únicamenete las películas que salieron entre 2000 y 2010?\n\n```{r}\n# Escribe aquí tu código\n\n\n\n```\n\n8.  ¿Cuál es la película peor calificada en «Rotten tomatoes» considerando únicamente a las películas que salieron antes del 2010?\n\n```{r}\n# Escribe aqui tu código\n\n\n\n```\n","srcMarkdownNoYaml":"\n\n# Introducción\n\nPara empezar a contestar preguntas útiles con los datos lo más básico es seleccionar, filtrar y ordenar nuestras tablas. En este notebook explicamos cómo realizar estas acciones.\n\n**Objetivos**\n\n-   Utilizar funciones para seleccionar columnas\n-   Utilizar funciones para filtrar datos\n-   Utilizar funciones para reordenar las filas de una tabla\n\n# Preparar los datos\n\nEn este notebook vamos a utilizar los datos de pokemón que preparamos en los notebooks anteriores. También cargamos el paquete tidyverse que vamos a usar.\n\n```{r}\n\nlibrary(tidyverse)\n\n# Leer los datos\npokemon <- read_csv(\"pokemon.csv\")\n\n# Limpiar los nombres de columnas\npokemon <- janitor::clean_names(pokemon)\npokemon\n\n```\n\n# Seleccionar una columna como vector\n\nPara seleccionar los valores de una columna como si fuera un vector podemos usar la función `pull`:\n\n```{r}\n\npull(pokemon, name)\n\n```\n\nPodemos guardar los valores en una variable y usarlos en otras funciones que ya conocemos:\n\n```{r}\n\nnombres <- pull(pokemon, name)\n\npaste(\"Hola soy\", nombres)\n\n```\n\n# Seleccionar columnas\n\nPara reducir el número de columnas de nuestros datos y quedarnos solo con las variables que nos interesan podemos usar la función `select`.\n\nRecordemos cuales son las columnas de nuestra tabla de datos:\n\n```{r}\n\nnames(pokemon)\n\n```\n\nSi solo nos queremos quedar con las columnas `name`, `type_1`, `type_2` y `total` usamos la función `select`:\n\n```{r}\n\nselect(pokemon, name, type_1, type_2, total)\n\n```\n\n# Ver los valores únicos de una columna\n\nAlgo muy útil cuando trabajamos con datos es saber todos los valores que una variable puede tomar. Por ejemplo, si nos interesar saber cuáles son todos los posibles tipos de pokemón. Para ello podemos usar la función `distinct`:\n\n```{r}\n\ndistinct(pokemon, type_1)\n\n```\n\n# Operadores de comparación\n\nAntes de poder filtrar datos necesitamos saber qué son los **operadores de comparación**. Los operadores lógicos son símbolos en R que nos sirven para comparar valores y decirnos si cumplen o no con el criterio que queremos. Cuando si lo cumplen nos arrojan un valor de `TRUE` y cuando no lo cumplen arrojan un valor de `FALSE`. Existen 6 operadores de comparación:\n\n1.  `==`: igual\n2.  `!=`: no igual\n3.  `>` mayor qué\n4.  `<` menor qué\n5.  `>=` mayor o igual qué\n6.  `<=` menor o igual qué\n\nEstos se colocan entre dos valores que se quieren comparar y cuando la condición se cumple nos arrojan `TRUE`:\n\n```{r}\n\n2 == 2\n2 != 1\n2 > 1\n1 < 2\n2 >= 2\n2 <= 2\n\n```\n\nY nos arrojan `FALSE` cuando las condiciones no se cumplen:\n\n```{r}\n\n2 == 1\n2 != 2\n1 > 2\n2 < 1\n1 >= 2\n2 <= 1\n\n```\n\nLos operadores de igualdad y desigualdad también sirven para comparar si dos cadenas de texto son iguales o no:\n\n```{r}\n\npalabra <- \"hola\" \n\npalabra == \"hola\"\npalabra == \"adiós\"\npalabra != \"hola\"\npalabra != \"adiós\"\n\n```\n\n# Operadores lógicos\n\nOtros operadores que necesitamos para filtrar datos son los **operadores lógicos**. Hay 3 operadores lógicos:\n\n1.  `&`: **Y**\n2.  `|`: **O**\n3.  `!`: **NO**\n\nEl operador «Y» nos regresa `TRUE` solo si las dos expresiones que lo rodean son verdaderas:\n\n```{r}\n\nTRUE & TRUE \nTRUE & FALSE \nFALSE & FALSE\n\npalabra <- \"hola\"\n\npalabra == \"hola\" & 1 == 1 \npalabra == \"hola\" & 1 != 1\npalabra == \"adios\" & 1 < 1\n```\n\nEl operador «O» nos regres `TRUE` si al menos una de las dos expresiones que lo rodean es verdadera:\n\n```{r}\n\nTRUE | TRUE \nTRUE | FALSE \nFALSE | FALSE\n\npalabra <- \"hola\"\n\npalabra == \"hola\" | 1 == 1 \npalabra == \"hola\" | 1 != 1\npalabra == \"adios\" | 1 < 1\n\n```\n\nFinalmente el operador *NO* inveirte el valor de una expresión, es decir, si la expresión es verdadera la cambia a falsa, y si la expresión es falsa la cambia a verdadera:\n\n```{r}\n\n! TRUE\n! FALSE\n\n! 1 == 1\n! 1 < 1\n\n```\n\n# Filtrar datos\n\nUna primera operación básica para empezar a analizar nuestros datos es filtrarlos. Filtrar significa quedarnos solo con las filas que cumplen un criterio que nosotros le demos. Por ejemplo podriamos queres solo quedarnos con los pokemón cuyo tipo 1 es planta (`Grass`). Para eso usamos la función `filter` y el operador de comparación de igualdad:\n\n```{r}\n\npokemon_planta <- filter(pokemon, type_1 == \"Grass\")\n\nprint(pokemon_planta, n = 100)\n\n\n```\n\nLa función `filter` como primer argumento recibe el nombre de la tabla de datos que queremos filtrar, y como segundo argumento recibe el criterio que queremos usar. En este caso queremos que el valor que tiene la fila en la columna `type_1` sea igual a la cadena `\"Grass\"`.\n\nAdemás de filtrar por un solo critero podemos agregar más criterios usando los operadores lógicos. Por ejemplo, podemos filtrar y quedarnos solo con los pokemón de tipo planta y veneno:\n\n```{r}\n\npokemon_planta_veneno <- filter(pokemon, type_1 == \"Grass\" & type_2 == \"Poison\")\nprint(pokemon_planta_veneno, n = 100)\n\n```\n\nEn la función filter podemos usar cualquier operador de comparación y operador lógico. Por ejemplo, podemos filtrar y quedarnos sólo con los pokemón que tienen tipo 1 Pasto o Agua:\n\n```{r}\n\nfilter(pokemon, type_1 == \"Grass\" | type_1 == \"Water\")\n\n```\n\nAdemás podemos usar los otros operadores de comparación que funcionan con valores numéricos. Por ejemplo, podemos quedarnos sólo con los pokemón con un puntaje `total` mayor a 700:\n\n```{r}\n\nfilter(pokemon, total >= 700)\n\n```\n\nO podemos quedarnos sólo con los pokemón con un puntaje `total` mayor a 700 y que son de la primera generación:\n\n```{r}\n\nfilter(pokemon, total >= 700 & generation == 1)\n\n```\n\n# Ordenar las filas\n\nAlgo muy útil para explorar los datos en una tabla es ordenar las filas de acuerdo a un criterio. Por ejemplo, podemos ordenar los pokemón de acuerdo a su poder `total` para conocer cuales son los pokemón más débiles. Para eso usamos la función `arrange`, la cual nos ordena los datos de menor a mayor con base en los valores de una columna:\n\n```{r}\n\narrange(pokemon, total)\n\n```\n\nSi deseamos ordenarlos de mayor a menor podemos usar la función `desc` en el nombre de la columna que usamos como criterio:\n\n```{r}\n\narrange(pokemon, desc(total))\n\n```\n\nPodemos aplicar más de un criterio para ordenar cuando hay empates. Por ejemplo, podemos ordenar a los pokemón desde los más poderosos a los menos poderosos y cuando hay empates poner primero a los más rápidos:\n\n```{r}\n\narrange(pokemon, desc(total), desc(speed))\n\n```\n\n# Filtrar y ordenar\n\nPodemos combinar los filtros y ordenamientos de los datos. Por ejemplo, podemos ordenar de más poderoso a menos poderoso sólamente a los pokemón de tipo eléctrico:\n\n```{r}\n\npokemon_electricos <- filter(pokemon, type_1 == \"Electric\" | type_2 == \"Electric\")\n\narrange(pokemon_electricos, desc(total))\n\n```\n\nNota como esto mismo también lo podemos hacer en una sola línea metiendo una función dentro de otra sin hacer objetos intermedios:\n\n```{r}\n\narrange(filter(pokemon, type_1 == \"Electric\" | type_2 == \"Electric\"), desc(total))\n\n```\n\n# Ejercicios\n\nPara estos ejercicios trabajamos con los datos de películas de pixar que usamos en notebooks pasados. Ejecuta el la celda siguiente para tener tus datos disponibles para los ejercicios:\n\n```{r}\n\npixar <- read_csv(\"pixar-movies.csv\")\npixar <- rename(pixar, year = year_released)\npixar <- janitor::clean_names(pixar)\npixar\n\n```\n\n## Ejercicio 1\n\n1.  Selecciona con la función `pull` la columna con los títulos de la película y guárdalo en una variable que se llame `titulos_pelicula`\n2.  Usa la función `paste` para que con cada nombre de la película obtengamos textos de la forma: `\"Película: Toy Story\"`\n\n```{r}\n# Escribe aquí tu respuesta\n\n\n```\n\n## Ejercicio 2\n\n1.  Selecciona únicamente las columnas con la información del nombre de la película y el director con la función `select`\n2.  Guarda tu resultado en una variable que se llame `pixar_directores`.\n3.  Usa la función `print` con un argumento de `n = 100` para imprimir toda la tabla en la consola\n4.  Usa la función `distinct` para ver todos los directores distintos que ha habido en las películas de pixar.\n\n```{r}\n# Escribe aquí tu respuesta\n\n\n\n```\n\n## Ejercicio 3\n\nUsa las funciones `filter`, `arrange` y `desc` para responder a las siguientes preguntas sobre las películas de pixar\n\n1.  ¿Cuál es la película de pixar más corta?\n\n```{r}\n# Escribe aquí tu código\n\n\n\n```\n\n2.  ¿Cuál es la película de pixar más larga?\n\n```{r}\n# Escribe aquí tu código\n\n\n\n```\n\n3.  ¿Cuáles son las películas que han tenido una menor calificación en «Rotten tomatoes»?\n\n```{r}\n# Escribe aquí tu código\n\n\n\n```\n\n4.  ¿Cuáles son las películas que han tenido una mayor calificación\n\n```{r}\n# Escribe aquí tu código\n\n\n\n```\n\n5.  ¿Cuál es la película que más ha vendido en taquilla?\n\n```{r}\n# Escribe aquí tu código\n\n\n\n```\n\n6.  ¿Cuál es la película que menos ha vendido en taquillas?\n\n```{r}\n# Escribe aquí tu código\n\n\n\n```\n\n7.  ¿Cuál fue la película que más vendió en taquillas considerando únicamenete las películas que salieron entre 2000 y 2010?\n\n```{r}\n# Escribe aquí tu código\n\n\n\n```\n\n8.  ¿Cuál es la película peor calificada en «Rotten tomatoes» considerando únicamente a las películas que salieron antes del 2010?\n\n```{r}\n# Escribe aqui tu código\n\n\n\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":"html","warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"10 - Seleccionar, filtrar y ordenar.html"},"language":{"toc-title-document":"Tabla de contenidos","toc-title-website":"En esta página","related-formats-title":"Otros formatos","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Fuente","other-links-title":"Otros Enlaces","code-links-title":"Enlaces de código","launch-dev-container-title":"Iniciar Dev Container","launch-binder-title":"Iniciar Binder","article-notebook-label":"Cuaderno de Artículo","notebook-preview-download":"Descargar Cuaderno","notebook-preview-download-src":"Descargar código fuente","notebook-preview-back":"Volver al Artículo","manuscript-meca-bundle":"Archivo MECA","section-title-abstract":"Resumen","section-title-appendices":"Apéndices","section-title-footnotes":"Notas","section-title-references":"Referencias","section-title-reuse":"Reutilización","section-title-copyright":"Derechos de autor","section-title-citation":"Cómo citar","appendix-attribution-cite-as":"Por favor, cita este trabajo como:","appendix-attribution-bibtex":"BibTeX","appendix-view-license":"Ver Licencia","title-block-author-single":"Autor/a","title-block-author-plural":"Autores/as","title-block-affiliation-single":"Afiliación","title-block-affiliation-plural":"Afiliaciones","title-block-published":"Fecha de publicación","title-block-modified":"Fecha de modificación","title-block-keywords":"Palabras clave","callout-tip-title":"Tip","callout-note-title":"Nota","callout-warning-title":"Advertencia","callout-important-title":"Importante","callout-caution-title":"Precaución","code-summary":"Código","code-tools-menu-caption":"Código","code-tools-show-all-code":"Mostrar todo el código","code-tools-hide-all-code":"Ocultar todo el código","code-tools-view-source":"Ver el código fuente","code-tools-source-code":"Ejecutar el código","tools-share":"Compartir","tools-download":"Descargar","code-line":"Línea","code-lines":"Líneas","copy-button-tooltip":"Copiar al portapapeles","copy-button-tooltip-success":"Copiado","repo-action-links-edit":"Editar esta página","repo-action-links-source":"Ver el código","repo-action-links-issue":"Informar de un problema","back-to-top":"Volver arriba","search-no-results-text":"Sin resultados","search-matching-documents-text":"documentos encontrados","search-copy-link-title":"Copiar el enlace en la búsqueda","search-hide-matches-text":"Ocultar resultados adicionales","search-more-match-text":"resultado adicional en este documento","search-more-matches-text":"resultados adicionales en este documento","search-clear-button-title":"Borrar","search-text-placeholder":"","search-detached-cancel-button-title":"Cancelar","search-submit-button-title":"Enviar","search-label":"Buscar","toggle-section":"Alternar sección","toggle-sidebar":"Alternar barra lateral","toggle-dark-mode":"Alternar modo oscuro","toggle-reader-mode":"Alternar modo lector","toggle-navigation":"Navegación de palanca","crossref-fig-title":"Figura","crossref-tbl-title":"Tabla","crossref-lst-title":"Listado","crossref-thm-title":"Teorema","crossref-lem-title":"Lema","crossref-cor-title":"Corolario","crossref-prp-title":"Proposición","crossref-cnj-title":"Conjetura","crossref-def-title":"Definición","crossref-exm-title":"Ejemplo","crossref-exr-title":"Ejercicio","crossref-ch-prefix":"Capítulo","crossref-apx-prefix":"Apéndice","crossref-sec-prefix":"Sección","crossref-eq-prefix":"Ecuación","crossref-lof-title":"Listado de Figuras","crossref-lot-title":"Listado de Tablas","crossref-lol-title":"Listado de Listados","environment-proof-title":"Prueba","environment-remark-title":"Observación","environment-solution-title":"Solución","listing-page-order-by":"Ordenar por","listing-page-order-by-default":"Por defecto","listing-page-order-by-date-asc":"Menos reciente","listing-page-order-by-date-desc":"Más reciente","listing-page-order-by-number-desc":"De mayor a menor","listing-page-order-by-number-asc":"De menor a mayor","listing-page-field-date":"Fecha","listing-page-field-title":"Título","listing-page-field-description":"Descripción","listing-page-field-author":"Autor/a","listing-page-field-filename":"Nombre de archivo","listing-page-field-filemodified":"Fecha de modificación","listing-page-field-subtitle":"Subtítulo","listing-page-field-readingtime":"Tiempo de lectura","listing-page-field-wordcount":"Conteo de Palabras","listing-page-field-categories":"Categorías","listing-page-minutes-compact":"{0} minutos","listing-page-category-all":"Todas","listing-page-no-matches":"No hay resultados","listing-page-words":"{0} palabras","listing-page-filter":"Filtro","draft":"Borrador"},"metadata":{"lang":"es","fig-responsive":true,"quarto-version":"1.5.55","theme":"cosmo","title":"10 - Seleccionar, filtrar y ordenar","editor_options":{"chunk_output_type":"console"}},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}