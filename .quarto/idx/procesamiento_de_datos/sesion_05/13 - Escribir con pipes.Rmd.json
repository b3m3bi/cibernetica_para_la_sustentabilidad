{"title":"13 - Escribir con pipes","markdown":{"yaml":{"title":"13 - Escribir con pipes","output":"html_document","editor_options":{"chunk_output_type":"console"}},"headingText":"Introducción","containsRefs":false,"markdown":"\n\n\nComo podrás haber notado conforme vamos haciendo códigos más largos tenemos que crear variables intermedias o sobreescribir variables que ya teníamos con nuevos valores. En este notebook introducimos los pipes los cuales son una forma de facilitar la escritura del código.\n\n**Objetivos**\n\n-   Utilizar los pipes para escribir el código de manera más concisa\n\n# Cargar los datos\n\nEn este notebook continuamos trabajando con los datos de pobreza de CONEVAL que usamos en los notebooks anteriores.\n\n```{r}\nlibrary(tidyverse)\n\npobreza <- read_csv(\n  './data/pobreza_municipal.csv', \n  col_select = c(\n    'entidad_federativa', \n    'municipio', \n    'poblacion', \n    'pobreza_poblacion',\n    'pobreza_extrema_poblacion',\n    'periodo'\n    )\n)\n\n```\n\n# El problema...\n\nCuando queremos manipular una tabla de datos con funciones como `filter`, `arrange`, `mutate`, `select` y `summarise` generalmente tenemos que crear muchas variables intermedias o sobreescribir muchas veces el mismo objeto. Por ejemplo, si queremos saber cómo ha cambiado el porcentaje de la población en pobreza en el estado de Jalisco en distintos periodos debemos hacer lo siguiente:\n\n```{r}\n# 1. Filtrar los datos para quedarnos solo con los de Jalisco\npobreza_jalisco <- filter(pobreza, entidad_federativa == \"Jalisco\")\n\n# 2. Agrupar a los datos por periodo\npobreza_jalisco_agrupado_por_periodo <- group_by(pobreza_jalisco, periodo)\n\n# 3. Hacer una tabla que resuma los datos\nresumen_jalisco_periodo <- summarise(\n  pobreza_jalisco_agrupado_por_periodo,\n  pob_total = sum(poblacion, na.rm = TRUE),\n  pob_pobreza = sum(pobreza_poblacion, na.rm = TRUE)\n)\n\n# 4. Agregar la columna con el porcentaje de población en pobreza\nresumen_jalisco_periodo <- mutate(\n  resumen_jalisco_periodo, \n  porcentaje_pobreza = pob_pobreza / pob_total * 100\n)\n\n# 5. Ordenar los periodos por porcentaje de población en pobreza\narrange(resumen_jalisco_periodo, porcentaje_pobreza)\n\n```\n\nNota como para hacer eso estamos creando tres variables intermedias: `pobeza_jalisco`, `pobreza_jalisco_agrupado_por_periodo` y `resumen_jalisco_periodo`, y además en el paso 4 sobrescribimos la variable `resumen_jalisco`. Estos son muchas variables y asignaciones intermedias que solo ocupan espacio en nuestra memoria, y son contraproducentes sobre todo si no las vamos a volver a usar.\n\nOtra forma como podríamos hacer lo mismo sin crear tantas variables intermedias es pasándole directamente el resultado de una función a la otra:\n\n```{r}\narrange(\n  mutate(\n    summarise(\n      group_by(\n        filter(\n          pobreza, \n          entidad_federativa == \"Jalisco\"\n          ), \n        periodo\n        ),\n      pob_total = sum(poblacion, na.rm = TRUE),\n      pob_pobreza = sum(pobreza_poblacion, na.rm = TRUE)\n    ),\n    porcentaje_pobreza = pob_pobreza / pob_total * 100\n  ),\n  porcentaje_pobreza\n)  \n\n```\n\nSin embargo, es muy difícil leer este código ya que tiene muchísimos paréntesis. Además para entender qué hace el código uno tiene que primero ver lo que está hasta adentro de todas las funciones. Por lo que esto no es nada práctico...\n\n# El pipe `|>`\n\nUna notación más conveniente que evita que tengamos que crear muchos objetos intermedios y que tengamos que hacer muchas funciones anidadas es con el pipe `|>`.\n\nEl pipe aprovecha el hecho de que funciones como `filter`, `group_by`, `mutate`, `arrange` y `summarise` todas siguen una misma estructura ya que **todas reciben como primer argumento la tabla de datos** que van a manipular.\n\nEl pipe lo que hace es **pasar como primer argumento a una función el resultado de la operación previa**. De manera general tenemos que\n\n```         \nf(x, y) |> g(z)\n```\n\nes equivalente a:\n\n```         \nresultado <- f(x,y)\ng(resultado, z)\n```\n\no sin crear variables intermedias:\n\n```         \ng(f(x, y), z)\n```\n\nEs decir, el resultado de la función `f` es pasado como primer argumento a la función `g`.\n\nPor ejemplo, si tenemos el siguiente código:\n\n```{r}\n\npobreza_jalisco <- filter(pobreza, entidad_federativa == \"Jalisco\")\narrange(pobreza_jalisco, poblacion)\n\n```\n\nQue sin objetos intermedios sería equivalente a:\n\n```{r}\n\narrange(filter(pobreza, entidad_federativa == \"Jalisco\"), poblacion)\n\n```\n\nCon el pipe la podemos reescribir de la siguiente manera:\n\n```{r}\n\n\npobreza |>\n  filter(entidad_federativa == \"Jalisco\") |>\n  arrange(poblacion)\n\n\n```\n\nNota como esta notación evita que hagamos un objeto intermedio y evita que nos perdamos entre tantos paréntesis y es más fácil de leer ya que podemos ver qué hace de arriba a abajo y de izquierda a derecha:\n\n> tomamos la tabla pobreza y la filtramos para quedamos solo con los datos de Jalisco, luego esa tabla la ordenamos de acuerdo a los valores de la columna población\n\nAsí el ejemplo que teníamos en la sección anterior lo podemos reescribir con pipes de la siguiente manera:\n\n```{r}\n\npobreza |>\n  filter(entidad_federativa == \"Jalisco\") |>\n  group_by(periodo) |>\n  summarise(\n    pob_total = sum(poblacion, na.rm = TRUE),\n    pob_pobreza = sum(pobreza_poblacion, na.rm = TRUE)\n  ) |>\n  mutate(\n    porcentaje_pobreza = pob_pobreza / pob_total * 100\n  ) |>\n  arrange(porcentaje_pobreza)\n\n```\n\n# Ejercicios\n\n## Ejercicio 1\n\nReescribe el siguiente código usando pipes:\n\n```{r}\n\npobreza_2020 <- filter(pobreza, periodo == '2020-01-01')\nsum(pull(pobreza_2020, poblacion), na.rm = TRUE)\n\n```\n\n```{r}\n# Reescribe aquí el código\n\n\n```\n\n## Ejercicio 2\n\nDescribe con tus propias palabras qué hace el siguiente código. ¿Qué datos incluye el resultado?\n\n```{r}\n\npobreza |>\n  filter(entidad_federativa == \"Chiapas\") |>\n  group_by(municipio) |>\n  summarise(promedio_pob_pobreza = mean(pobreza_poblacion, na.rm = TRUE))\n\n```\n\n## Ejercicio 3\n\nReescribe el siguiente código usando pipes:\n\n```{r}\n\npobreza_2020 <- filter(pobreza, periodo == '2020-01-01')\npobreza_2020_agrupado_por_entidad <- group_by(pobreza_2020, entidad_federativa)\nresumen_pobreza_2020_entidad <- summarise(\n  pobreza_2020_agrupado_por_entidad,\n  pob_total = sum(poblacion, na.rm = TRUE),\n  pob_pobreza = sum(pobreza_poblacion, na.rm = TRUE)\n)\nresumen_pobreza_2020_entidad <- mutate(\n  resumen_pobreza_2020_entidad,\n  porcentaje_pobreza = pob_pobreza / pob_total * 100\n)\n\narrange(resumen_pobreza_2020_entidad, porcentaje_pobreza)\n```\n\n```{r}\n# Reescribe aquí el código\n\n\n```\n","srcMarkdownNoYaml":"\n\n# Introducción\n\nComo podrás haber notado conforme vamos haciendo códigos más largos tenemos que crear variables intermedias o sobreescribir variables que ya teníamos con nuevos valores. En este notebook introducimos los pipes los cuales son una forma de facilitar la escritura del código.\n\n**Objetivos**\n\n-   Utilizar los pipes para escribir el código de manera más concisa\n\n# Cargar los datos\n\nEn este notebook continuamos trabajando con los datos de pobreza de CONEVAL que usamos en los notebooks anteriores.\n\n```{r}\nlibrary(tidyverse)\n\npobreza <- read_csv(\n  './data/pobreza_municipal.csv', \n  col_select = c(\n    'entidad_federativa', \n    'municipio', \n    'poblacion', \n    'pobreza_poblacion',\n    'pobreza_extrema_poblacion',\n    'periodo'\n    )\n)\n\n```\n\n# El problema...\n\nCuando queremos manipular una tabla de datos con funciones como `filter`, `arrange`, `mutate`, `select` y `summarise` generalmente tenemos que crear muchas variables intermedias o sobreescribir muchas veces el mismo objeto. Por ejemplo, si queremos saber cómo ha cambiado el porcentaje de la población en pobreza en el estado de Jalisco en distintos periodos debemos hacer lo siguiente:\n\n```{r}\n# 1. Filtrar los datos para quedarnos solo con los de Jalisco\npobreza_jalisco <- filter(pobreza, entidad_federativa == \"Jalisco\")\n\n# 2. Agrupar a los datos por periodo\npobreza_jalisco_agrupado_por_periodo <- group_by(pobreza_jalisco, periodo)\n\n# 3. Hacer una tabla que resuma los datos\nresumen_jalisco_periodo <- summarise(\n  pobreza_jalisco_agrupado_por_periodo,\n  pob_total = sum(poblacion, na.rm = TRUE),\n  pob_pobreza = sum(pobreza_poblacion, na.rm = TRUE)\n)\n\n# 4. Agregar la columna con el porcentaje de población en pobreza\nresumen_jalisco_periodo <- mutate(\n  resumen_jalisco_periodo, \n  porcentaje_pobreza = pob_pobreza / pob_total * 100\n)\n\n# 5. Ordenar los periodos por porcentaje de población en pobreza\narrange(resumen_jalisco_periodo, porcentaje_pobreza)\n\n```\n\nNota como para hacer eso estamos creando tres variables intermedias: `pobeza_jalisco`, `pobreza_jalisco_agrupado_por_periodo` y `resumen_jalisco_periodo`, y además en el paso 4 sobrescribimos la variable `resumen_jalisco`. Estos son muchas variables y asignaciones intermedias que solo ocupan espacio en nuestra memoria, y son contraproducentes sobre todo si no las vamos a volver a usar.\n\nOtra forma como podríamos hacer lo mismo sin crear tantas variables intermedias es pasándole directamente el resultado de una función a la otra:\n\n```{r}\narrange(\n  mutate(\n    summarise(\n      group_by(\n        filter(\n          pobreza, \n          entidad_federativa == \"Jalisco\"\n          ), \n        periodo\n        ),\n      pob_total = sum(poblacion, na.rm = TRUE),\n      pob_pobreza = sum(pobreza_poblacion, na.rm = TRUE)\n    ),\n    porcentaje_pobreza = pob_pobreza / pob_total * 100\n  ),\n  porcentaje_pobreza\n)  \n\n```\n\nSin embargo, es muy difícil leer este código ya que tiene muchísimos paréntesis. Además para entender qué hace el código uno tiene que primero ver lo que está hasta adentro de todas las funciones. Por lo que esto no es nada práctico...\n\n# El pipe `|>`\n\nUna notación más conveniente que evita que tengamos que crear muchos objetos intermedios y que tengamos que hacer muchas funciones anidadas es con el pipe `|>`.\n\nEl pipe aprovecha el hecho de que funciones como `filter`, `group_by`, `mutate`, `arrange` y `summarise` todas siguen una misma estructura ya que **todas reciben como primer argumento la tabla de datos** que van a manipular.\n\nEl pipe lo que hace es **pasar como primer argumento a una función el resultado de la operación previa**. De manera general tenemos que\n\n```         \nf(x, y) |> g(z)\n```\n\nes equivalente a:\n\n```         \nresultado <- f(x,y)\ng(resultado, z)\n```\n\no sin crear variables intermedias:\n\n```         \ng(f(x, y), z)\n```\n\nEs decir, el resultado de la función `f` es pasado como primer argumento a la función `g`.\n\nPor ejemplo, si tenemos el siguiente código:\n\n```{r}\n\npobreza_jalisco <- filter(pobreza, entidad_federativa == \"Jalisco\")\narrange(pobreza_jalisco, poblacion)\n\n```\n\nQue sin objetos intermedios sería equivalente a:\n\n```{r}\n\narrange(filter(pobreza, entidad_federativa == \"Jalisco\"), poblacion)\n\n```\n\nCon el pipe la podemos reescribir de la siguiente manera:\n\n```{r}\n\n\npobreza |>\n  filter(entidad_federativa == \"Jalisco\") |>\n  arrange(poblacion)\n\n\n```\n\nNota como esta notación evita que hagamos un objeto intermedio y evita que nos perdamos entre tantos paréntesis y es más fácil de leer ya que podemos ver qué hace de arriba a abajo y de izquierda a derecha:\n\n> tomamos la tabla pobreza y la filtramos para quedamos solo con los datos de Jalisco, luego esa tabla la ordenamos de acuerdo a los valores de la columna población\n\nAsí el ejemplo que teníamos en la sección anterior lo podemos reescribir con pipes de la siguiente manera:\n\n```{r}\n\npobreza |>\n  filter(entidad_federativa == \"Jalisco\") |>\n  group_by(periodo) |>\n  summarise(\n    pob_total = sum(poblacion, na.rm = TRUE),\n    pob_pobreza = sum(pobreza_poblacion, na.rm = TRUE)\n  ) |>\n  mutate(\n    porcentaje_pobreza = pob_pobreza / pob_total * 100\n  ) |>\n  arrange(porcentaje_pobreza)\n\n```\n\n# Ejercicios\n\n## Ejercicio 1\n\nReescribe el siguiente código usando pipes:\n\n```{r}\n\npobreza_2020 <- filter(pobreza, periodo == '2020-01-01')\nsum(pull(pobreza_2020, poblacion), na.rm = TRUE)\n\n```\n\n```{r}\n# Reescribe aquí el código\n\n\n```\n\n## Ejercicio 2\n\nDescribe con tus propias palabras qué hace el siguiente código. ¿Qué datos incluye el resultado?\n\n```{r}\n\npobreza |>\n  filter(entidad_federativa == \"Chiapas\") |>\n  group_by(municipio) |>\n  summarise(promedio_pob_pobreza = mean(pobreza_poblacion, na.rm = TRUE))\n\n```\n\n## Ejercicio 3\n\nReescribe el siguiente código usando pipes:\n\n```{r}\n\npobreza_2020 <- filter(pobreza, periodo == '2020-01-01')\npobreza_2020_agrupado_por_entidad <- group_by(pobreza_2020, entidad_federativa)\nresumen_pobreza_2020_entidad <- summarise(\n  pobreza_2020_agrupado_por_entidad,\n  pob_total = sum(poblacion, na.rm = TRUE),\n  pob_pobreza = sum(pobreza_poblacion, na.rm = TRUE)\n)\nresumen_pobreza_2020_entidad <- mutate(\n  resumen_pobreza_2020_entidad,\n  porcentaje_pobreza = pob_pobreza / pob_total * 100\n)\n\narrange(resumen_pobreza_2020_entidad, porcentaje_pobreza)\n```\n\n```{r}\n# Reescribe aquí el código\n\n\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":"html_document","warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"13 - Escribir con pipes.html"},"language":{"toc-title-document":"Tabla de contenidos","toc-title-website":"En esta página","related-formats-title":"Otros formatos","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Fuente","other-links-title":"Otros Enlaces","code-links-title":"Enlaces de código","launch-dev-container-title":"Iniciar Dev Container","launch-binder-title":"Iniciar Binder","article-notebook-label":"Cuaderno de Artículo","notebook-preview-download":"Descargar Cuaderno","notebook-preview-download-src":"Descargar código fuente","notebook-preview-back":"Volver al Artículo","manuscript-meca-bundle":"Archivo MECA","section-title-abstract":"Resumen","section-title-appendices":"Apéndices","section-title-footnotes":"Notas","section-title-references":"Referencias","section-title-reuse":"Reutilización","section-title-copyright":"Derechos de autor","section-title-citation":"Cómo citar","appendix-attribution-cite-as":"Por favor, cita este trabajo como:","appendix-attribution-bibtex":"BibTeX","appendix-view-license":"Ver Licencia","title-block-author-single":"Autor/a","title-block-author-plural":"Autores/as","title-block-affiliation-single":"Afiliación","title-block-affiliation-plural":"Afiliaciones","title-block-published":"Fecha de publicación","title-block-modified":"Fecha de modificación","title-block-keywords":"Palabras clave","callout-tip-title":"Tip","callout-note-title":"Nota","callout-warning-title":"Advertencia","callout-important-title":"Importante","callout-caution-title":"Precaución","code-summary":"Código","code-tools-menu-caption":"Código","code-tools-show-all-code":"Mostrar todo el código","code-tools-hide-all-code":"Ocultar todo el código","code-tools-view-source":"Ver el código fuente","code-tools-source-code":"Ejecutar el código","tools-share":"Compartir","tools-download":"Descargar","code-line":"Línea","code-lines":"Líneas","copy-button-tooltip":"Copiar al portapapeles","copy-button-tooltip-success":"Copiado","repo-action-links-edit":"Editar esta página","repo-action-links-source":"Ver el código","repo-action-links-issue":"Informar de un problema","back-to-top":"Volver arriba","search-no-results-text":"Sin resultados","search-matching-documents-text":"documentos encontrados","search-copy-link-title":"Copiar el enlace en la búsqueda","search-hide-matches-text":"Ocultar resultados adicionales","search-more-match-text":"resultado adicional en este documento","search-more-matches-text":"resultados adicionales en este documento","search-clear-button-title":"Borrar","search-text-placeholder":"","search-detached-cancel-button-title":"Cancelar","search-submit-button-title":"Enviar","search-label":"Buscar","toggle-section":"Alternar sección","toggle-sidebar":"Alternar barra lateral","toggle-dark-mode":"Alternar modo oscuro","toggle-reader-mode":"Alternar modo lector","toggle-navigation":"Navegación de palanca","crossref-fig-title":"Figura","crossref-tbl-title":"Tabla","crossref-lst-title":"Listado","crossref-thm-title":"Teorema","crossref-lem-title":"Lema","crossref-cor-title":"Corolario","crossref-prp-title":"Proposición","crossref-cnj-title":"Conjetura","crossref-def-title":"Definición","crossref-exm-title":"Ejemplo","crossref-exr-title":"Ejercicio","crossref-ch-prefix":"Capítulo","crossref-apx-prefix":"Apéndice","crossref-sec-prefix":"Sección","crossref-eq-prefix":"Ecuación","crossref-lof-title":"Listado de Figuras","crossref-lot-title":"Listado de Tablas","crossref-lol-title":"Listado de Listados","environment-proof-title":"Prueba","environment-remark-title":"Observación","environment-solution-title":"Solución","listing-page-order-by":"Ordenar por","listing-page-order-by-default":"Por defecto","listing-page-order-by-date-asc":"Menos reciente","listing-page-order-by-date-desc":"Más reciente","listing-page-order-by-number-desc":"De mayor a menor","listing-page-order-by-number-asc":"De menor a mayor","listing-page-field-date":"Fecha","listing-page-field-title":"Título","listing-page-field-description":"Descripción","listing-page-field-author":"Autor/a","listing-page-field-filename":"Nombre de archivo","listing-page-field-filemodified":"Fecha de modificación","listing-page-field-subtitle":"Subtítulo","listing-page-field-readingtime":"Tiempo de lectura","listing-page-field-wordcount":"Conteo de Palabras","listing-page-field-categories":"Categorías","listing-page-minutes-compact":"{0} minutos","listing-page-category-all":"Todas","listing-page-no-matches":"No hay resultados","listing-page-words":"{0} palabras","listing-page-filter":"Filtro","draft":"Borrador"},"metadata":{"lang":"es","fig-responsive":true,"quarto-version":"1.5.55","theme":"cosmo","title":"13 - Escribir con pipes","editor_options":{"chunk_output_type":"console"}},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}